import * as cheerio from 'cheerio';
import { BlockObjectRequest, TextRichTextItemResponse } from '@notionhq/client/build/src/api-endpoints';
import { Client } from '@notionhq/client';

export function htmlToNotionBlocks(html: string): BlockObjectRequest[] {
  const $ = cheerio.load(html);
  const blocks: BlockObjectRequest[] = [];

  $('body')
    .children()
    .each((_, el) => {
      const tag = el.tagName?.toLowerCase();
      const $el = $(el);

      // ✅ Detect Prism-style code blocks
      if (
        $el.hasClass('code-block__counter') ||
        $el.find('.code-line__counter').length > 0
      ) {
        const lines: string[] = [];
        $el.find('.code-line__counter').each((_, lineEl) => {
          lines.push($(lineEl).text());
        });

        const language = extractLanguageFromClass($el.attr('class'));
        const codeText = lines.join('\n');

        blocks.push({
          object: 'block',
          type: 'code',
          code: {
            'language': 'javascript',
            rich_text: [{ type: 'text', text: { content: codeText } }],
          },
        });
      }

      // ✅ Paragraph with inline links
      else if (tag === 'p') {
        const rich_text: TextRichTextItemResponse[] = [];

        $el.contents().each((_, node) => {
          if (node.type === 'text') {
            rich_text.push({
              type: 'text',
              text: {
                content: node.data || '',
                link: null,
              },
            });
          } else if (node.type === 'tag' && node.name === 'a') {
            const $a = $(node);
            rich_text.push({
              type: 'text',
              text: {
                content: $a.text(),
                link: { url: $a.attr('href') || '' },
              },
            });
          }
        });

        blocks.push({
          object: 'block',
          type: 'paragraph',
          paragraph: {
            rich_text,
          },
        });
      }

      // ✅ Headings
      else if (tag === 'h1') {
        blocks.push({
          object: 'block',
          type: 'heading_1',
          heading_1: {
            rich_text: [{ type: 'text', text: { content: $el.text() } }],
          },
        });
      } else if (tag === 'h2') {
        blocks.push({
          object: 'block',
          type: 'heading_2',
          heading_2: {
            rich_text: [{ type: 'text', text: { content: $el.text() } }],
          },
        });
      }

      // ✅ Bulleted lists
      else if (tag === 'ul') {
        $el.find('li').each((_, li) => {
          blocks.push({
            object: 'block',
            type: 'bulleted_list_item',
            bulleted_list_item: {
              rich_text: [{ type: 'text', text: { content: $(li).text() } }],
            },
          });
        });
      }
    });

  return blocks;
}

function extractLanguageFromClass(className: string | undefined): string {
  if (!className) return 'plain';
  const match = className.match(/language-([\w]+)/);
  return match ? match[1] : 'plain';
}

export async function sendHtmlToNotion({
  html,
  pageId,
}: {
  html: string;
  pageId: string;
}) {
  const notion = new Client({ auth: process.env.NOTION_TOKEN });

  const blocks = htmlToNotionBlocks(html);
  console.log('blocks', blocks);
  //   for (const block of blocks) {
  //     await notion.blocks.children.append({
  //       block_id: pageId,
  //       children: [block],
  //     });
  //   }
}

const html = `
<article class="flex flex-col gap-y-8"><div class="flex flex-col gap-y-8"><div><span class="text-neutral-600 dark:text-neutral-400 text-body2 mb-1 block">System design</span><header class="flex flex-wrap items-center gap-4"><h1 class="text-pretty text-neutral-900 dark:text-neutral-100 xl:text-3xl xl:-tracking-1 text-2xl font-semibold inline-flex">Google Docs</h1><div class="flex gap-2"><span class="relative inline-flex items-center rounded-full px-2 text-xs gap-1 bg-brand-dark dark:bg-brand border border-brand-dark dark:border-brand py-px"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 text-neutral-900 -ms-0.5 size-3" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M11.9996 0.5L16.2256 6.68342L23.4123 8.7918L18.8374 14.7217L19.053 22.2082L11.9996 19.6897L4.94617 22.2082L5.16179 14.7217L0.586914 8.7918L7.7736 6.68342L11.9996 0.5ZM9.99959 12H7.99959C7.99959 14.2091 9.79045 16 11.9996 16C14.1418 16 15.8907 14.316 15.9947 12.1996L15.9996 12H13.9996C13.9996 13.1046 13.1042 14 11.9996 14C10.9452 14 10.0814 13.1841 10.0051 12.1493L9.99959 12Z"></path></svg><span class="whitespace-nowrap font-medium text-neutral-900 font-semibold">Premium</span></span></div></header></div><div class="flex items-start justify-between"><section class="flex flex-wrap items-center justify-start gap-x-6 gap-y-4 "><div class="group block shrink-0"><span class="sr-only" id=":Rmaqjtttt7rl9uffkva:">Author</span><div aria-labelledby=":Rmaqjtttt7rl9uffkva:" class="flex items-center gap-x-3"><div class="inline-flex h-8"><a class="transition-colors underline-offset-[3.5px] break-words font-medium" href="https://www.linkedin.com/in/yangshun" rel="noreferrer noopener" target="_blank" aria-label="Yangshun Tay" data-state="closed" type="button"><span class="inline-flex shrink-0 items-center justify-center select-none overflow-hidden rounded-full size-8"><img alt="Yangshun Tay" src="https://www.gfecdn.net/img/team/yangshun.jpg" class="size-full object-cover"></span></a></div><div class="flex flex-col gap-y-0.5"><div class="flex items-center gap-x-1"><a class="transition-colors underline-offset-[3.5px] break-words hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand text-neutral-900 dark:text-neutral-100 text-body3 font-semibold block whitespace-nowrap" href="https://www.linkedin.com/in/yangshun" rel="noreferrer noopener" target="_blank">Yangshun Tay</a><a class="transition-colors underline-offset-[3.5px] break-words font-medium" href="https://www.linkedin.com/in/yangshun" rel="noreferrer noopener" target="_blank"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="text-neutral-700 dark:text-neutral-300 text-body3 font-semibold size-4 shrink-0" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3362 18.339H15.6707V14.1622C15.6707 13.1662 15.6505 11.8845 14.2817 11.8845C12.892 11.8845 12.6797 12.9683 12.6797 14.0887V18.339H10.0142V9.75H12.5747V10.9207H12.6092C12.967 10.2457 13.837 9.53325 15.1367 9.53325C17.8375 9.53325 18.337 11.3108 18.337 13.6245V18.339H18.3362ZM7.00373 8.57475C6.14573 8.57475 5.45648 7.88025 5.45648 7.026C5.45648 6.1725 6.14648 5.47875 7.00373 5.47875C7.85873 5.47875 8.55173 6.1725 8.55173 7.026C8.55173 7.88025 7.85798 8.57475 7.00373 8.57475ZM8.34023 18.339H5.66723V9.75H8.34023V18.339ZM19.6697 3H4.32923C3.59498 3 3.00098 3.5805 3.00098 4.29675V19.7033C3.00098 20.4202 3.59498 21 4.32923 21H19.6675C20.401 21 21.001 20.4202 21.001 19.7033V4.29675C21.001 3.5805 20.401 3 19.6675 3H19.6697Z"></path></svg></a></div><span class="text-neutral-600 dark:text-neutral-400 text-body3 block whitespace-nowrap">Ex-Meta Staff Engineer</span></div></div></div><button data-state="closed" class="" type="button"><span class="sr-only" id=":R26aqjtttt7rl9uffkva:">Difficulty</span><div aria-labelledby=":R26aqjtttt7rl9uffkva:" class="flex items-center gap-x-1.5"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="size-5 shrink-0 text-neutral-400 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M12 23C16.1421 23 19.5 19.6421 19.5 15.5C19.5 14.6345 19.2697 13.8032 19 13.0296C17.3333 14.6765 16.0667 15.5 15.2 15.5C19.1954 8.5 17 5.5 11 1.5C11.5 6.49951 8.20403 8.77375 6.86179 10.0366C5.40786 11.4045 4.5 13.3462 4.5 15.5C4.5 19.6421 7.85786 23 12 23ZM12.7094 5.23498C15.9511 7.98528 15.9666 10.1223 13.463 14.5086C12.702 15.8419 13.6648 17.5 15.2 17.5C15.8884 17.5 16.5841 17.2992 17.3189 16.9051C16.6979 19.262 14.5519 21 12 21C8.96243 21 6.5 18.5376 6.5 15.5C6.5 13.9608 7.13279 12.5276 8.23225 11.4932C8.35826 11.3747 8.99749 10.8081 9.02477 10.7836C9.44862 10.4021 9.7978 10.0663 10.1429 9.69677C11.3733 8.37932 12.2571 6.91631 12.7094 5.23498Z"></path></svg><span class="text-body3 text-red">Hard</span></div></button><button data-state="closed" class="" type="button"><span class="sr-only" id=":R36aqjtttt7rl9uffkva:">Recommended duration to spend during interviews</span><div aria-labelledby=":R36aqjtttt7rl9uffkva:" class="flex items-center gap-x-1.5"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="size-5 shrink-0 text-neutral-400 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM13 12H17V14H11V7H13V12Z"></path></svg><span class="text-body3 whitespace-nowrap text-neutral-700 dark:text-neutral-500"><number-flow-react aria-label="40mins" role="img" data="{&quot;pre&quot;:[],&quot;integer&quot;:[{&quot;type&quot;:&quot;integer&quot;,&quot;value&quot;:4,&quot;key&quot;:&quot;integer:1&quot;,&quot;pos&quot;:1},{&quot;type&quot;:&quot;integer&quot;,&quot;value&quot;:0,&quot;key&quot;:&quot;integer:0&quot;,&quot;pos&quot;:0}],&quot;fraction&quot;:[],&quot;post&quot;:[{&quot;type&quot;:&quot;suffix&quot;,&quot;value&quot;:&quot;mins&quot;,&quot;key&quot;:&quot;suffix:0&quot;}],&quot;valueAsString&quot;:&quot;40mins&quot;,&quot;value&quot;:40}"></number-flow-react></span></div></button><button data-state="closed" class="" type="button"><span class="sr-only" id=":R3maqjtttt7rl9uffkva:">Users completed</span><div aria-labelledby=":R3maqjtttt7rl9uffkva:" class="flex items-center gap-x-1.5"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="size-5 shrink-0 text-neutral-400 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11.0026 16L6.75999 11.7574L8.17421 10.3431L11.0026 13.1716L16.6595 7.51472L18.0737 8.92893L11.0026 16Z"></path></svg><span class="text-body3 whitespace-nowrap text-neutral-700 dark:text-neutral-500">145 done</span></div></button></section><button type="button" class="inline-flex items-center justify-center h-7 px-2 py-1.5 gap-x-1 text-xs whitespace-nowrap font-medium border rounded-full transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 border-neutral-300 dark:border-neutral-700 text-neutral-900 dark:text-neutral-100 bg-white dark:bg-neutral-900 hover:bg-neutral-100 dark:hover:bg-neutral-800/70 active:bg-neutral-200 dark:active:bg-neutral-700 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" data-state="closed"><div>Report an issue</div><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 !size-4" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M13 19.9C15.2822 19.4367 17 17.419 17 15V12C17 11.299 16.8564 10.6219 16.5846 10H7.41538C7.14358 10.6219 7 11.299 7 12V15C7 17.419 8.71776 19.4367 11 19.9V14H13V19.9ZM5.5358 17.6907C5.19061 16.8623 5 15.9534 5 15H2V13H5V12C5 11.3573 5.08661 10.7348 5.2488 10.1436L3.0359 8.86602L4.0359 7.13397L6.05636 8.30049C6.11995 8.19854 6.18609 8.09835 6.25469 8H17.7453C17.8139 8.09835 17.88 8.19854 17.9436 8.30049L19.9641 7.13397L20.9641 8.86602L18.7512 10.1436C18.9134 10.7348 19 11.3573 19 12V13H22V15H19C19 15.9534 18.8094 16.8623 18.4642 17.6907L20.9641 19.134L19.9641 20.866L17.4383 19.4077C16.1549 20.9893 14.1955 22 12 22C9.80453 22 7.84512 20.9893 6.56171 19.4077L4.0359 20.866L3.0359 19.134L5.5358 17.6907ZM8 6C8 3.79086 9.79086 2 12 2C14.2091 2 16 3.79086 16 6H8Z"></path></svg></button></div></div><div class="flex flex-col gap-y-6"><div class="h-px w-full bg-neutral-200 dark:bg-neutral-800"></div><div class="flex flex-col gap-y-4"><h2 class="text-pretty text-neutral-900 dark:text-neutral-100 font-semibold text-neutral-900 dark:text-neutral-100 text-body1 font-medium">Asked at these companies</h2><div class="flex flex-wrap gap-x-2"><span class="relative inline-flex items-center rounded-full border px-3 py-0.5 border-neutral-200 dark:border-neutral-800"><span class="text-neutral-600 dark:text-neutral-400 text-body3">Atlassian</span></span> <span class="relative inline-flex items-center rounded-full border px-3 py-0.5 border-neutral-200 dark:border-neutral-800"><span class="text-neutral-600 dark:text-neutral-400 text-body3">OpenAI</span></span> </div></div><div class="h-px w-full bg-neutral-200 dark:bg-neutral-800"></div><div class="prose dark:prose-invert text-[15px] break-words"><h2>Question</h2>
<p>Design a collaborative document editor that allows users to collaborate on a document in real-time.</p>
<p><strong>Note</strong>: This article focuses on the collaboration aspects of collaborative text editing software and not much about text editing itself. For a deep dive into rich text editing, have a look at the <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="/questions/system-design/rich-text-editor">Rich Text Editor system design article</a>.</p>
<h3>Real-life examples</h3>
<ul>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://www.google.com/docs/about/" rel="noreferrer noopener" target="_blank">Google Docs</a></li>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://www.notion.so/" rel="noreferrer noopener" target="_blank">Notion</a></li>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://quip.com/" rel="noreferrer noopener" target="_blank">Quip</a></li>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://etherpad.org/" rel="noreferrer noopener" target="_blank">Etherpad</a></li>
</ul></div></div><div class="h-px w-full bg-neutral-200 dark:bg-neutral-800"></div><div class="prose dark:prose-invert text-[15px] break-words"><h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#requirements-exploration" id="requirements-exploration">Requirements exploration<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<ul>
<li>Functional<!-- -->
<ul>
<li>Any participant can edit / view the document</li>
<li>Updates by peers on the same document are reflected automatically</li>
<li>Conflicts are resolved if participants are editing the same part</li>
<li>All participants should see the same document revision eventually</li>
<li>Offline usage? Not required, but we’ll discuss if there's time</li>
</ul>
</li>
<li>Non-functional<!-- -->
<ul>
<li>Updates by others are reflected in real-time</li>
<li>Support up to 100 concurrent editors (<a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://support.google.com/docs/answer/2494822" rel="noreferrer noopener" target="_blank">Google has the same limit</a>)</li>
</ul>
</li>
</ul>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#background" id="background">Background<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<p>Firstly, let's understand what a collaborative editing session over Google docs entails. The following characteristics are observed/required of collaborative editing sessions:</p>
<ul>
<li><strong>Responsive (in the delay sense)</strong>: Actions taken by participants (e.g. inserting/deleting characters, formatting) should be reflected instantly.</li>
<li><strong>Real-time updates</strong>: Actions taken by peers should be reflected near instantly.</li>
<li><strong>Conflict-prone</strong>: During a session there is a high chance of access conflict as participants work on and modify the same parts of the document, e.g. deleting a sentence when another participant is modifying it.</li>
<li><strong>Distributed</strong>: Participants are accessing the web application on their own machines, without any geographical constraints.</li>
<li><strong>Ad hoc</strong>: Participants are free to come and go during a session; they may drop off anytime or join anytime.</li>
<li><strong>Unpredictable</strong>: In general, participants are not following a pre-planned script, it is not possible to predict what information will be accessed and in what order.</li>
</ul>
<p>The technical term for such collaborative software is "groupware systems". Most products in Google Workspace (formerly known as G Suite) like Google Sheets and Google Slides also support real-time collaboration.</p>
<p>Note that participants should be considered on the browser tab level. A user can open the same document on two separate tabs. Assuming there is no direct communication between browser tabs for the same user, it will be simpler to treat each tab as a separate participants and sync their document states.</p>
<p>The complexity of real-time collaborative editing solutions arises primarily from communication latency. Ideally, if communication were instantaneous, developing a real-time collaborative editor would be as straightforward as creating a single-user editor as updates from peers would appear as if they were made by the active user.</p>
<p>However, network latency limits communication speed, leading to a fundamental challenge: users expect their own edits to be incorporated into the document immediately. Yet, if these edits are applied instantly, they are necessarily inserted into different revisions of the document due to the delay in communication.</p>
<p>Consider the following example: Alice and Bob start with a document that contains the word "Mary". Bob deletes the letter "M" and then inserts "H", intending to change the word to "Hary". Meanwhile, Alice, without having received Bob's edits, deletes the letter "r" and then deletes "a", with the intention of changing the word to "My". As a result, both Alice and Bob will receive edits that were applied to versions of the document that never existed on their own machines and without any special handling, the document states might diverge.</p>
<p>Therefore the challenge of real-time collaborative editing is to determine how to correctly apply edits from remote users that were originally made in versions of the document that never existed locally and may conflict with the user's own local changes.</p>
<p>Typically, for front end system design, we only need to care about what goes on within the client. However, for collaborative editing, the server also plays an important role in the collaboration protocol, making it necessary to also discuss the server's state and responsibilities.</p>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#approach" id="approach">Approach<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<p>It's hard to design an entire complex system by looking at parts in isolation, but it's also not conducive for learning if the final architecture is presented to you without explaining how we arrived at those decisions.</p>
<p>Hence we will discuss the various aspects of the systems, the various approaches that can be taken, the tradeoffs involved, then make a decision on the overall approach.</p>
<p>It's important to note that some of these decisions we will be making have dependencies on each other and the decisions only make sense when used together as part of the overall approach. So if while reading you're wondering how we know that a certain decision is better, read on first and hopefully the later parts will justify the earlier decisions.</p>
<p>After deciding on the overall approach, we will then dive deeper into the architecture, data model, and APIs to move forward with.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#rendering-and-editing-rich-text" id="rendering-and-editing-rich-text">Rendering and editing rich text<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>In well-architected systems, rendering the document UI is mostly independent of the communication models and protocols behind the scenes. We explain the "front end" of collaborative editors in more detail in the <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="/questions/system-design/rich-text-editor">Rich Text Editor system design article</a>.</p>
<p>Here is a summary of the ways to build rich text editing on the web:</p>
<ul>
<li><strong>DOM with augmented fake cursors</strong>: Using regular DOM containing formatted text using HTML elements and styling augmented with fake cursors. This approach is complex due to cursor height and positioning calculations needed.</li>
<li><strong><code>contenteditable</code> attribute</strong>: By adding the <code>contenteditable</code> attribute to a DOM element, its content becomes editable and even supports keyboard shortcuts for bold, italics, underline formatting. However, it behaves differently in different browsers and formatting options are limited.</li>
<li><strong>HTML <code>&lt;canvas&gt;</code> element</strong>: This is an advanced approach that uses a <code>&lt;canvas&gt;</code> element and rendering everything within the canvas element – text, layout, cursor, etc. This approach basically sidesteps a lot of what the browser provides, and requires reimplementing everything within a canvas context.</li>
</ul>
<p>In practice, most rich text editors on the web are built using the <code>contenteditable</code> attribute backed by custom event handlers and allows for more content elements.</p>
<p>In 2021, Google <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://workspaceupdates.googleblog.com/2021/05/Google-Docs-Canvas-Based-Rendering-Update.html?utm_source=the+new+stack&amp;utm_medium=referral&amp;utm_content=inline-mention&amp;utm_campaign=tns+platform" rel="noreferrer noopener" target="_blank">announced that Google Docs will be moving towards a canvas based rendering approach</a> to "improve performance and consistency in how content appears across different platforms". While Google Docs uses a canvas-based approach, it is too complex to discuss and most front end developers do not have much experience with canvas. We recommend being familiar with the <code>contenteditable</code> attribute approach first.</p>
<p>In summary, most rich text editors on the web use <code>contenteditable</code> and take the following high-level approach:</p>
<ol>
<li>Design a editor-specific model of the document content, usually tree-based</li>
<li>Create a mapping between the model and DOM elements</li>
<li>Define a set of supported operations on this model (e.g. insert text at position, delete text, format text)</li>
<li>Translate user events (keypresses and mouse clicks) into a sequence of these supported operations</li>
<li>Update the DOM based on these operations, ideally with minimal DOM manipulation calls</li>
</ol>
<p>Read more about the "front end" of collaborative editors in the <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="/questions/system-design/rich-text-editor">Rich Text Editor system design article</a>.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#request-payload-contents" id="request-payload-contents">Request payload contents<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>When a participant makes an update, or receives an update from others, what should the request payload contain?</p>
<p>The two common approaches are:</p>
<ul>
<li><strong>Payload contains the entire current document</strong>: Sending and receiving the entire current document state.</li>
<li><strong>Payload contains only changes (the delta)</strong>: Sending and receiving just the updates made.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#transmitting-entire-document" id="transmitting-entire-document">Transmitting entire document<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Transmitting the entire document per update has the following properties:</p>
<ul>
<li><strong>Clear document state</strong>: Recipients know the full state of the document the sender was viewing when it was updated.</li>
<li><strong>Sender intentions aren't clear</strong>: Just by receiving the updated document, recipients do not know what changes were made unless they compare with their own document revision or the sender's previous document revision, both of which are troublesome to compute.</li>
<li><strong>Not scalable</strong>: As the document grows, the amount of data to transmit will increase proportionately. For large documents, each request will take longer to transmit.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#transmitting-only-changes" id="transmitting-only-changes">Transmitting only changes<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Transmitting just the changes has the following properties:</p>
<ul>
<li><strong>Small request payload size</strong>: Since only the changes are sent, the request payload size is generally small, typically containing only the command (e.g. insertion, delete, formatting) and associated metadata (e.g. characters and position to insert/delete).</li>
<li><strong>Efficient request payload size</strong>: The document's length has no impact on the request payload size since the changes are not reliant on the current document state.</li>
<li><strong>No document state information</strong>: It's not clear which version of the document the changes were made against. This can be mitigated by including a document revision number in the request payload – more on that later.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#what-should-requests-contain" id="what-should-requests-contain">What should requests contain?<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>A short response time (under 500ms) is required for a real-time WYSIWIS (What-You-See-Is-What-I-See) experience. Meaning when a user makes an edit, all other participants should see that change reflected on their screens within 500ms. If participants see slightly different or outdated versions of the document, the cohesiveness of the session is ruined.</p>
<p>Updates made by participants should be communicated in a lightweight fashion, thus the request payload for updates should ideally <strong>contain just the changes</strong>.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#network-architecture--communication-model" id="network-architecture--communication-model">Network architecture / communication model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>There are two common models for network communication between groupware system participants:</p>
<ul>
<li><strong>Client-server model</strong>: Central server; all participants communicate only with the server</li>
<li><strong>Peer-to-peer</strong>: No central server; all participants act as both a server and client</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#client-server-model" id="client-server-model">Client-server model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>In a client-server network model, participants (clients) request resources from a central server and send payloads to it. The server processes these requests and provides the appropriate responses.</p>
<p><img alt="Client-server architecture" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/client-server-architecture.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r0:" data-state="closed"></p>
<p><strong>Advantages</strong>:</p>
<ul>
<li><strong>Centralized source of truth</strong>: All updates have to first go through the server. The server determines the latest document revision and holds the source of truth.</li>
<li><strong>Robustness</strong>: When new participants join or one of the existing clients crash (due to bugs, network flakiness, etc), the latest document can be fetched from the server.</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li><strong>Single point of failure</strong>: The central server is a critical component; if it fails, the entire network can be disrupted.</li>
<li><strong>Cost</strong>: Higher infrastructure and maintenance costs due to the need for powerful central servers.</li>
<li><strong>Scalability</strong>: Can become a bottleneck if the number of clients grows rapidly without proper scaling.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#peer-to-peer-p2p-model" id="peer-to-peer-p2p-model">Peer-to-peer (P2P) model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>In a P2P network model, each participant acts as both a client and a server. Peers communicate directly with each other without the need for a central server.</p>
<p><img alt="Peer-to-peer architecture" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/peer-to-peer-architecture.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r3:" data-state="closed"></p>
<p><strong>Advantages</strong>:</p>
<ul>
<li><strong>Lower latency</strong>: Each participant communicates with each other directly without the need for a middleman, resulting in lower latency in general.</li>
<li><strong>Cost effective</strong>: Without a central server, infrastructure costs are lower.</li>
<li><strong>Load distribution</strong>: When more participants join, the extra network load is distributed among all participants, preventing bottlenecks.</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li><strong>Synchronization problems</strong>: Without a central authority, it is hard for participants to determine if their version of the document is the latest version and what updates are missing. Each participant needs to keep track of the peers' document states and ensure they are up-to-date.</li>
<li><strong>Complicated consensus</strong>: When new participants join or one of the existing clients crash (due to bugs, network flakiness, etc), the new member has to figure out how to fetch the latest document revision among all the peers.</li>
<li><strong>Server is still needed</strong>: Since the document needs to be persisted to a database, a server is needed anyway.</li>
<li><strong>Security</strong>: If a participant goes rogue, all connected participants will be affected.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#which-model-to-use" id="which-model-to-use">Which model to use?<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Although the client-server model seemingly has fewer advantages, the source of truth being on the server is an important functional property that makes or breaks the entire system:</p>
<ul>
<li><strong>Database persistence</strong>: The document state has to be persisted in a database. Without a central server to save the document frequently, updates could be lost if clients disconnect before saving the document to the database.</li>
<li><strong>Source of truth</strong>: Since new participants are able to join at any time, having the source of truth on the server simplifies the logic of reliably obtaining the latest document – new participants can fetch the latest document from a single consistent location, the server.</li>
<li><strong>Optimize for reliability and performance</strong>: Reliability and performance are the most important factors for a seamless collaboration experience and making sure all participants are updated. In practice, most sessions will not see a large number of participants (&gt; 20) at any given time; there will only be a few participants at most. We should optimize for reliability and performance rather than server costs.</li>
</ul>
<p>With these reasons in mind, a client-server model is preferred. P2P models are more suitable for applications like video chat, where request losses can be tolerated, and not all the data has to be persisted.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#concurrency-control-model" id="concurrency-control-model">Concurrency control model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>There are two kinds of operations that need to be made when discussing collaborative editors:</p>
<ul>
<li><strong>Local updates</strong>: Updates made to the document by the user viewing it.</li>
<li><strong>Merge updates from peers</strong>: Updates made to the document by peers.</li>
</ul>
<p>All these updates have to be merged into the current document. Conflicts might arise if two users are editing the same section of the document (e.g. somebody deletes a sentence when another person is adding a word to the sentence).</p>
<p>Concurrency control is the activity of coordinating interfering actions that operate in parallel to maintain consistency between participants and resolving conflicts that arise between participants.</p>
<p>They can be broadly classified into optimistic and pessimistic types:</p>
<ul>
<li><strong>Pessimistic</strong>: Pessimistic methods guarantee that no conflicts occur. Their main objective is inconsistency avoidance. They require communication with other sites or a central coordinator before any data changes are made. This communication can be explicit (e.g. floor control policy), or implicit, where the user's program handles it in the background (e.g. locking). In general, pessimistic methods do not require conflict resolutions but have higher network latency and longer response times.</li>
<li><strong>Optimistic</strong>: Optimistic methods do not bother with avoiding conflicting updates. They require no prior communication before making local changes and are well-suited for high-latency communications channels since the results of a user's actions can be displayed without waiting for a communications round-trip. The user applies the changes immediately and updates the server which then notifies the peers. If multiple participants make simultaneous changes, a conflict resolution algorithm creates compensating changes to ensure everyone reaches the same final state. Optimistic methods have zero/near-zero local response times but may require conflict resolutions.</li>
</ul>
<p>Text editing is unlike traditional form submission, where users can tolerate updates taking up to a few seconds to complete. Textual updates made by the user should be reflected instantly without any latency. To support zero latency local updates, clients should maintain a replica of the document state locally and user updates are made against the replica so that they can be reflected on their UI instantly.</p>
<p>Let's have a look at the various concurrency control mechanisms, their properties, and their pros and cons.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#last-write-wins-model" id="last-write-wins-model">Last write wins model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>For traditional web applications like admin dashboards. If two users modify the same entity simultaneously (e.g., changing a person's name), a race condition occurs. The final name saved in the database will be the one submitted by the request that arrives last.</p>
<p>In distributed computing, this behavior is called "last write wins". Obviously, "last write wins" will not work for a collaborative editor, not at the document level at least. It is hardly considered collaborative at all!</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#floor-control-model" id="floor-control-model">Floor control model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>"Floor control" is a protocol which determines which user has control (has the floor) and how to take turns when multiple people access a resource, a document in this case.</p>
<ul>
<li><strong>Token-based</strong>: A token circulates among participants, and only the participant holding the token can make changes. Participants can request for a token and the predefined policy (e.g. first-come-first-served, or free-for-all) determines if the request is granted.</li>
<li><strong>Chair-controlled</strong>: A designated chairperson or moderator grants and revokes participant access to resources.</li>
</ul>
<p>Participants without control can still see the updates being made in a live fashion.</p>
<p>Floor control helps to prevent conflicts and ensure orderly interactions. Evidently, this method does not fulfill the requirements because only one participant can make edits at any one time; peers have to wait for their turn to edit. One way around this is to allow participants to take over control of the token anytime they want, but it's not a great user experience for participants who are still typing to have control taken away from them suddenly.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#locks-model" id="locks-model">Locks model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Locking is the concept of preventing unwanted access to data (read and/or write). In the context of collaborative editing, when an editor starts editing a document, the document (or parts of it) can be locked to prevent unwanted modifications from peers.</p>
<p>There are a few issues to discuss related to locking:</p>
<ul>
<li><strong>Locking granularity</strong>: Locking can be done on the document level, paragraph level, sentence level, word level, etc. Document-level locking is essentially the "floor control" mechanism. Finegrain granularity is better, but what should happen in sentence-level locking when the paragraph containing the sentence is being deleted?</li>
<li><strong>Lock requests</strong>: Locks can be requested in both optimistic and pessimistic fashions.<!-- -->
<ul>
<li><strong>Pessimistic locking</strong>: Clients make a network request to obtain the lock. Clients will only start allowing modifications after the lock has been granted. There is network latency involved in acquiring the lock, so users will experience a delay before being able to do any actions, which can be annoying.</li>
<li><strong>Optimistic locking</strong>: Clients allow modifications and requests for the lock at the same time. If the request for the lock was rejected (possibly because another person also requested for the lock at the same time), the client will roll back the updates prior to requesting for the lock.</li>
</ul>
</li>
<li><strong>Lock releases</strong>: After a lock is acquired, when should it be released? Should the lock be requested when the cursor is moved or when the key is struck? For example, if locks are released when the cursor is moved then a user could move to one place to copy some text only to be locked out from pasting it into their previous location. On the other hand, if locks are retained too generously, users might still be granted the lock even when they no longer need it, e.g. a lock is redundant when the user leaves the document open but goes away from the keyboard. Determining the idle threshold is tricky. Similar to floor control, allowing users to take over control of the lock anytime they want is one way of mitigating lock releasing issues.</li>
</ul>
<p>Locking is an improvement over floor control (which is also technically a type of locking) and is viable at the right granularity with optimistic locking and appropriate lock releasing strategies due to the ease of implementation. In fact, collaborative editing apps like <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://quip.com/" rel="noreferrer noopener" target="_blank">Quip</a> used a lock-based concurrency model in earlier versions of their product. Locking is actually a viable approach for real-time collaboration if the likelihood for editing the same section is low.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#transaction-based-model" id="transaction-based-model">Transaction-based model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>A transaction-based approach is an optimistic method, where users make changes locally and changes are validated at the end of the transaction, similar to distributed version control systems like Git and Mercurial. Version control systems manage changes to documents or resources by maintaining different versions and allowing users to merge changes.</p>
<p>Each user has a copy of the document within their computer and can make their changes locally, without any locks or other restrictions. Changes are not pushed immediately. When the user is done updating, the changes are committed and pushed up to the server. If there are any conflicts, the transactions are rolled back and the user has to resolve them in order to update the server.</p>
<p>This approach has the benefit of zero latency local updates and all participants can update their documents simultaneously without any locking restrictions. However, in this approach, updates aren't real-time – users are required to explicitly push their updates and explicitly pull updates from others. Additionally, it requires users to resolve conflicts themselves, which is annoying and unreasonable to expect of common users.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#version-detection-model" id="version-detection-model">Version-detection model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>In a version-detection model, the document state is replicated in each user's machine and participants can make changes locally, which are then propagated to peers as soon as possible. Under good network connections, users should see updates from peers in under a second.</p>
<p>Each update request contains the new data and the document revision the change was acted on. When the server receives the update request, it first checks if the revision in the request is the same as the current revision. If the revisions match, the server updates the document, saves it as a new revision, and broadcasts this information to all peers so that everyone is on the latest revision. If they are different, then there's a "version mismatch" which can be resolved in one of the following ways:</p>
<ul>
<li><strong>Reject the request</strong>: This avoids having to do any conflict resolution but isn't ideal as the frequency of it happening can be quite often when there are multiple participants simultaneously updating the same part of the document.</li>
<li><strong>Compensate changes</strong>: Automatically compensate the changes to rectify the version mismatch and bring the system to a consistent state. In most cases, compensating is straightforward if changes were made to different parts of the document (probably no need to compensate at all!). If the changes do conflict, we can use conflict resolution methods like Operational Transformations (OTs). On the other hand, if Conflict-free Replicated Data Types (CRDTs) are used, there is no need for compensation.</li>
</ul>
<p>The version-detection model with compensation enjoys the benefits of zero latency local updates, all participants being able to update their documents simultaneously in real-time without any locking restrictions, and will eventually converge into the same version of the document if there's a robust conflict detection and resolution approach.</p>
<p>Version detection trumps the transaction-based model and fulfills all the real-time collaboration requirements. The only issue being – how exactly are conflicts resolved? We'll explore them in more detail below.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#which-concurrency-model-to-use" id="which-concurrency-model-to-use">Which concurrency model to use?<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Only the <strong>version-detection consistency model</strong> is able to meet all the real-time collaborative editing requirements because it has the following properties:</p>
<ul>
<li><strong>Replicated</strong>: The document is replicated in the machines of all participants. This is necessary for the model to make optimistic updates.</li>
<li><strong>Optimistic and non-blocking</strong>: Updates are made locally, without worrying about conflicts. Optimistic behavior is necessary for zero-latency responsiveness during local updates – the speed or reliability of your network connection will not influence how fast users can type.</li>
<li><strong>No locking</strong>: The entire document is available to every participant all the time.</li>
<li><strong>Automatic conflict resolution</strong>: Any detected conflicts are resolved automatically on the server. Possible approaches include creating compensating changes and informing the client (OT), or using data structures that resolve conflicts automatically (CRDTs).</li>
</ul>
<p>From each participant's perspective, it will feel as if they are editing an offline Word document – there is no latency involved when editing.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#conflict-resolution-approaches" id="conflict-resolution-approaches">Conflict resolution approaches<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>Conflicts can arise when two or more participants are editing the same part of the document. Let's run through an example.</p>
<p>Assume we have a document containing a single word "ABCDE", and Alice and Bob edit it at the same time:</p>
<ol>
<li>Alice deletes the fourth character "D". Her computer sends a request <code>DEL @3</code> to indicate deletion of the fourth character, which is at index 3 (zero-based indexing).</li>
<li>Bob deletes the second character "B". His computer sends a request <code>DEL @1</code> to indicate deletion of the second character, which is at index 1 (zero-based indexing).</li>
</ol>
<p>The server will process both requests. For now, the server simply executes the commands and relays them without any special handling). The intended end result after both deletions is "ACE".</p>
<p>Since network latency is unpredictable, one of two scenarios can happen:</p>
<p><img alt="Alice and Bob network diagram without operational transformations" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/alice-bob-without-ot.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r6:" data-state="closed"></p>
<ol>
<li><strong>Alice first</strong>: The server receives Alice's request before Bob's, resulting in the server deleting the fourth character then the second character "ABCDE" -&gt; "ABCE" -&gt; "ACE". In this scenario, the document on the server correctly deletes Alice's and Bob's intended character. The server ends up with "ACE".</li>
<li><strong>Bob first</strong>: The server receives Bob's request before Alice's, resulting in the server deleting the second character then the fourth character: "ABCDE" -&gt; "ACDE" -&gt; "ACD". Notice that when the server processes Alice's request, the fourth character of the document is now "E", but Alice wanted to delete "D". The server ends up with "ACD".</li>
</ol>
<p>In this naive approach, depending on whose request the server receives first, the server ends up with different document states.</p>
<p>In fact, Bob will always end up with "ACD" regardless of whose request reaches the server first. Remember that updates are first made locally then sent to the server to be broadcasted to others. The problem is that offsets depend on the state of the document at the time an edit was made. Request payloads include the offsets but not the context they depend on, which results in the divergence.</p>
<p>This is just one of the possible scenarios that result in conflicts. There are other possible combinations like insertion + insertion, deletion + insertion, deletion + deletion, etc.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#conflict-resolution-properties" id="conflict-resolution-properties">Conflict resolution properties<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Therefore we need a conflict resolution approach that adheres to these properties as much as possible:</p>
<ul>
<li><strong>Convergence</strong>: All replicas will eventually reach the same state, provided that they have received and applied the same set of operations (the quiescence state).</li>
<li><strong>Causality preservation</strong>: Ensures that the order of operations respects the causal relationships between them. For example, if one operation logically follows another, the system must apply these operations in that order to maintain consistency (e.g. deletion of a character after its insertion).</li>
<li><strong>Intention preservation</strong>: Ensure that the original intent of an operation is maintained after concurrent operations are merged. This means that the result of merging concurrent operations should align with what users expect their operations to achieve, even in the presence of conflicts. E.g. Alice makes the entire sentence bold and Bob adds a word to the sentence at the same time, the end result should be that the sentence including Bob's word is bold.</li>
</ul>
<p>Two common conflict resolution approaches are used:</p>
<ul>
<li><strong>Operational Transformations (OT)</strong>: OT accounts for context at the point of editing and transforms the operations accordingly (e.g. by modifying the offsets of insertions/deletions).</li>
<li><strong>Conflict-free Replicated Data Types (CRDTs)</strong>: CRDTs enforce the use of data structures where updates are commutative and associative such that the order of operations does not matter.</li>
</ul>
<p><strong>Note</strong>: Explaining each conflict resolution approach in detail is beyond the scope of this article (there isn't enough time during interviews anyway). However, you should be able to explain the general principles using an example. We will explain how each approach works, provide examples and links to resources for your further reading.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#operational-transformations-ot" id="operational-transformations-ot">Operational Transformations (OT)<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>OT was originally developed for collaborative editing of text documents, allowing multiple users to edit simultaneously without conflicts. It maintains the consistency of document states across different clients by transforming operations based on the context of other concurrent operations.</p>
<p>OT systems typically use a replicated document storage model, where each client maintains a local copy of the document. Users operate on their local copies, and changes are propagated to other clients. When a client receives changes from another client, it applies transformation functions to ensure that the local document remains consistent with the updates.</p>
<p>The key components of OT include:</p>
<ol>
<li><strong>Operations</strong>: These are the basic actions users perform, such as inserting, deleting, or modifying text. Each operation is associated with a position in the document.</li>
<li><strong>Transformation functions</strong>: These functions determine how to adjust operations when they conflict. For example, if two users insert text at the same position, the transformation function will resolve the conflict to maintain a consistent document state.</li>
<li><strong>Control algorithms</strong>: These algorithms manage the sequence and context of transformations. They decide which operations should be transformed against others based on their causal relationships, ensuring that the order of operations respects the intent of each user.</li>
</ol>
<p>Let's revisit the Alice and Bob example and see how applying OT can solve the issue.</p>
<p><img alt="Alice and Bob network diagram with operational transformations" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/alice-bob-with-ot.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:rb:" data-state="closed"></p>
<ol>
<li><strong>Alice before Bob</strong>: The server receives Alice's request before Bob's, resulting in the server deleting the fourth character then the second character "ABCDE" -&gt; "ABCE" -&gt; "ACE". In this scenario, the document on the server correctly deletes Alice's and Bob's intended characters. However, Bob's computer realizes that Alice's change was made before Bob's deletion, hence it transformed Alice's change from <code>DEL @3</code> -&gt; <code>DEL @2</code> since Bob deleted an earlier character. Bob ends up with "ACE".</li>
<li><strong>Bob before Alice</strong>: The server receives Bob's request before Alice's, resulting in the server deleting the second character: "ABCDE" -&gt; "ACDE". When the server receives Alice's request, it realizes that Alice's change was made before Bob's deletion, hence it transforms Alice's change from <code>DEL @3</code> -&gt; <code>DEL @2</code> to account for Bob's deletion of an earlier character. The server correctly deletes "D" (the third character) and passes this transformed operation to Bob. Both the server and Bob end up with "ACE".</li>
</ol>
<p>Both servers and clients can perform OT and must handle all the various ways that insertion, deletion, and formatting changes can be paired and transformed against each other. The example above showed how a deletion is transformed against a deletion. Some other examples of transformations:</p>
<ul>
<li>Formatting is expanded when transformed against insertions: <code>FORMAT BOLD @10-20</code> transformed against <code>INS "ABC" @15</code> results in <code>FORMAT BOLD @10-23</code>.</li>
<li>Not all changes will conflict and in those cases do not require transformation. E.g. <code>FORMAT BOLD @10-20</code> and <code>FORMAT ITALIC @15-25</code> do not conflict as text can be both bold and italic at the same time.</li>
</ul>
<p>How does the server know whether Alice's and Bob's requests were made with or without accounting for the other party's changes and whether it has to do any transformation? Each time an update is made on the server and the document is modified, the document is saved as a new revision (e.g. using timestamps or <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://en.wikipedia.org/wiki/Monotonic_function" rel="noreferrer noopener" target="_blank">monotonically</a> increasing integers). Timestamps are not a great choice because machine time can be manipulated which results in an incorrect order when sorting by time, a monotonically increasing positive integer is preferred.</p>
<p>Requests and responses can include the document revision number so that both servers and clients know the document version the other party was seeing when the request was made and can correctly determine if operations require transformation.</p>
<p><strong>Analysis of OT</strong>: Let's take a look at how OT fulfills the conflict resolution properties:</p>
<ul>
<li><strong>Convergence</strong>: OT uses transformation functions to modify operations so that they can be applied consistently across all replicas, even if they arrive in different orders. The core idea is that if two operations conflict, the transformation functions adjust one or both operations to ensure they can be applied in any order but still lead to the same final state.</li>
<li><strong>Causality preservation</strong>: OT systems often use causal history tracking to ensure that operations are applied in an order that respects their causal dependencies. This is usually done by tagging operations with metadata, such as timestamps or revision numbers, which indicate their causal relationships.</li>
<li><strong>Intention preservation</strong>: OT payloads commonly include the command intention and context (document revision number). The transformation functions consider the context in which an operation was originally applied. The command along with the contextual awareness helps in preserving the original intention even when the document has changed due to other concurrent operations.</li>
</ul>
<p>OT works well for text-based documents but can be less effective for other types of data structures, such as hierarchical or non-linear data. Implementing OT for these types of data requires additional effort and customizations.</p>
<p>There are many implementations of OT algorithms and various consistency models, which are beyond the scope of this article. If you're interested, check out the following links:</p>
<ul>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs_22.html" rel="noreferrer noopener" target="_blank">What’s different about the new Google Docs: Conflict resolution</a></li>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://medium.com/coinmonks/operational-transformations-as-an-algorithm-for-automatic-conflict-resolution-3bf8920ea447" rel="noreferrer noopener" target="_blank">Operational Transformations as an algorithm for automatic conflict resolution</a></li>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://operational-transformation.github.io/" rel="noreferrer noopener" target="_blank">Visualization of OT with a central server</a></li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#conflict-free-replicated-data-types-crdts" id="conflict-free-replicated-data-types-crdts">Conflict-free Replicated Data Types (CRDTs)<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>If you were wondering – why use offset indices for the updates when they are highly coupled to the current document state and go through the hassle of resolving conflicts with complex algorithms like OT? Why not use a different payload or data structure that provides more information regarding the update and makes merging updates easier? That is exactly Conflict-free Replicated Data Types (CRDTs) aims to do.</p>
<p>CRDTs are advanced data structures designed for distributed systems, enabling multiple users or applications to update shared data concurrently without coordination which eventually converge to the same state (strong eventual consistency) when all updates have been received and applied. Instead of resolving conflicts using OT, CRDTs are built so that the operations performed on the data are inherently conflict-free or can be automatically resolved in a consistent manner.</p>
<p>CRDTs have the following properties:</p>
<ol>
<li><strong>Concurrent updates</strong>: CRDTs enable independent updates across multiple replicas of data. Each replica can be modified without needing to coordinate with others, making them ideal for environments where network connectivity may be intermittent. Updates can be propagated using the gossip protocol without the need for a central authority.</li>
<li><strong>Monotonic increasing updates</strong>: Updates to a CRDT must be monotonic, ensuring that new values are always greater than or distinct from previous values. This allows for a clear progression of state changes.</li>
<li><strong>Commutative and associative operations</strong>: The operations in a CRDT must be commutative (Order does not matter -&gt; <code>A + B + C === C + B + A</code>), associative (Grouping does not matter -&gt; <code>(A + B) + C === A + (B + C)</code>). This ensures that all replicas, even if they receive operations in different orders or merge states at different times, will end up in the same state.</li>
<li><strong>Automatic conflict resolution</strong>: CRDTs incorporate predefined algorithms (e.g. last writer wins) that automatically resolve inconsistencies that may arise from concurrent updates. This means that even if different replicas make conflicting changes, the CRDT can merge these changes without manual user intervention.</li>
<li><strong>Eventual consistency</strong>: Although replicas may have different states at any point in time, CRDTs guarantee that all replicas will eventually converge to the same final state once all updates have been propagated, regardless of the order in which these updates are received. This is often referred to as "strong eventual consistency", which ensures that no inconsistent states are held.</li>
</ol>
<p>The CRDT model is somewhat similar to Git – every developer in the organization possesses a copy of the repository and is allowed to make changes locally. At the end of the day, the developers can merge changes with every other developer however they like: pair-wise, round-robin, or through a central repository. Once all the merges are complete, every developer will have the same state. However unlike Git, a CRDT prescribes a way to merge conflicts automatically and can merge out-of-order changes.</p>
<p><strong>Example of CRDT – Grow-only set</strong>: An example of a CRDT is a grow-only set. A grow-only set is an unordered set that only allows addition of unique elements. It is a CRDT because:</p>
<ul>
<li>The set can be replicated.</li>
<li>Each replica can add any element it likes and the addition is a monotonically increasing update.</li>
<li>Each replica can be merged back together in any order.</li>
<li>Once all merges are complete, all replicas will have the same contents (the union of all individual sets).</li>
</ul>
<p><strong>Representing text in CRDTs</strong>: Collaborative text documents can be represented using sequence CRDTs like lists (e.g. <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://www.bartoszsypytkowski.com/operation-based-crdts-arrays-1/" rel="noreferrer noopener" target="_blank">Linear Sequences and Replicated Growable Array</a>) and trees. Unsurprisingly, text CRDTs are more complicated to implement than a grow-only set. <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://nomad.foo/blog/cola" rel="noreferrer noopener" target="_blank">Cola</a> is a text CRDT written in Rust, but the data structure can be implemented in any language.</p>
<!-- -->
<p>Text editing also involves deleting. How can we represent deletion in CRDTs? The trick is to track deletions as well by using two separate grow-only data structures, one to track insertion and another to track deletion (known as tombstone markers). The resulting value is the items in the insertion set minus the items in the deletion set. Complex CRDTs are often combined from smaller CRDTs which helps tremendously in preserving the CRDT properties.</p>
<p><strong>Analysis of CRDTs</strong>: Let's take a look at how CRDTs fulfill the conflict resolution properties:</p>
<ul>
<li><strong>Convergence</strong>: CRDT operations are designed to be commutative and associative, meaning the order and grouping in which operations are applied does not affect the final state. This is a key reason why all replicas converge to the same state.</li>
<li><strong>Causality preservation</strong>: Operations are applied to other replicas in a way that respects causality. For example, operations can be propagated in any order, but an operation might be buffered until all preceding causally related operations have been applied. E.g. a deletion only takes effect until the insertion has taken place. In a Last-Writer-Wins Register (LWW-Register), updates are tagged with timestamps, ensuring that the most recent update (according to causality) prevails.</li>
<li><strong>Intention preservation</strong>: CRDTs incorporate predefined conflict resolution strategies that aim to preserve user intent. These strategies are typically application-specific and ensure that the merged state reflects the combined intentions of all concurrent operations. The specific semantics of CRDT operations are crafted to ensure that, when two operations conflict, the resolution preserves the most meaningful aspects of each operation. However, there's some amount of subjectivity and is highly implementation and use-case dependent.</li>
</ul>
<p><strong>Drawbacks of CRDTs</strong>: While CRDTs are more modern compared to OT, it does come with some drawbacks:</p>
<ul>
<li><strong>Metadata overhead</strong>: CRDTs often require additional metadata to track operations, revisions, or unique identifiers. This metadata can grow over time, leading to increased storage requirements, especially in large-scale systems or with complex data types.</li>
<li><strong>Ever-increasing size</strong>: CRDTs have a monotonically increasing state, often having to track removals that do not appear in the final visual result. This means the data will only grow over time. Garbage collection or cleanup mechanisms can be used but they can be technically challenging to implement without causing inconsistencies in replicas.</li>
<li><strong>Conflict resolution</strong>: While CRDTs are designed to resolve conflicts by merging concurrent updates in a predefined way, this automatic conflict resolution might not always align with the desired application semantics, leading to unexpected results.</li>
</ul>
<p>CRDTs entirely bypass the need for causality preservation as updates can be merged in any order and still converge into the same ending state. Whether CRDTs can preserve intention depends on the chosen conflict resolution strategy and implementation.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#which-conflict-resolution-approach-to-use" id="which-conflict-resolution-approach-to-use">Which conflict resolution approach to use?<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>Both OT and CRDTs are designed to manage concurrent updates to shared data in a way that maintains consistency across all replicas, but they do so using different methodologies and with varying trade-offs.</p>
<p><strong>Convergence</strong>: OT can guarantee convergence but requires more careful handling of operation order and context. It often requires a central server or a more tightly coordinated communication protocol to ensure consistency. CRDTs are designed to guarantee eventual consistency between replicas and will converge to the same state as long as they receive all updates. CRDTs is superior here because it has stronger convergence guarantees.</p>
<p><strong>Technical complexity</strong>: Implementing CRDTs for complex or hierarchical data structures can be challenging, requiring careful design to ensure that the operations maintain the desired properties. Implementing OT is also complex, especially when designing the transformation functions that must handle all possible conflicts and concurrent operations. Although CRDTs' consistency model is easier to understand, it's harder to understand and implement CRDTs for text structures. In the context of text editing, OT takes the lead.</p>
<p><strong>Ecosystem</strong>: OT is a mature technology and has been implemented in several well-known collaborative editing systems with many mature libraries and tools available – Google Docs itself uses OT. CRDTs is the new kid on the block, but has been well-studied over the years and many libraries implementing CRDTs have been created. Figma, a collaborative design editing software uses CRDTs. There is no clear winner in terms of ecosystem as both approaches have been well-studied (and criticized).</p>
<p>Overall, there's no clearly superior choice. Both CRDTs and OT can be used to implement collaborative editors. CRDTs are general purpose while OT has its roots in document editing. While CRDT is newer and more trendy, OT is mature and excels in real-time collaborative editing applications where low-latency, immediate feedback, and fine-grained control over user intentions are critical.</p>
<p>The rest of the article assumes usage of OT as the conflict resolution approach. The primary reason is that Google Docs itself is implemented using OT, so there are also more resources in terms of implementing collaborative text editors using OT as opposed to CRDTs. It is also easier to explain how OT works as opposed to text CRDTs, which has very complex structure.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#collaboration-protocol" id="collaboration-protocol">Collaboration protocol<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>We have discussed the conflict resolution approaches, but it is only one part of the story. There are other unanswered questions related to collaborative editing using OT:</p>
<ul>
<li><strong>Request scheduling</strong>: When are update requests sent? On every keystroke, after the user has stopped typing, or something else? If a user makes multiple back-to-back updates, should they all be sent to the server as they are made or is there a better way to schedule them?</li>
<li><strong>Multiple participants</strong>: The OT examples above demonstrate how transformations work for two participants. What happens when there are more than two participants in the session and operations have to be transformed against multiple peers?</li>
<li><strong>Participants joining</strong>: How do users who join an editing session mid-way start updating their replica and receive updates from others?</li>
</ul>
<p>A collaboration protocol can be designed to answer these questions. It might be helpful to try out this <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://operational-transformation.github.io/" rel="noreferrer noopener" target="_blank">interactive visualization of OT with a central server</a> before reading on.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#central-server" id="central-server">Central server<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>While OT does not require a central server at its core, having a central server simplifies certain things.</p>
<p>A central server architecture makes it simple for clients to stay in-sync with the server. The role of the server is to receive updates and serve as the authority of the document state, transforming operations when clients send requests that conflict with the latest document. The server can also reject operations if the payload is invalid or if the operation was on a document revision that is too old, the operation is too hard to transform, or there are too many operations to transform.</p>
<p>When the server receives an update request, it will broadcast the update to connected clients. Clients do not need to care about how many other connected clients there are. It relies on the server to inform itself of the changes to make. From a client's perspective, having N peer clients (where N is the number of peers) take turns every second to make updates in a round robin fashion is equivalent to a single peer client making updates every second. To a client, having one peer is the same as having ten peers. This allows us to achieve N-way synchronization by running N independent two-party synchronization between each client-server pair. Clients only have to focus on synchronization with the server, and servers can treat all clients equally; there are no special clients to consider.</p>
<p>Participants who join mid-way will be served the version of the document at request time. From that point on, they are a connected client and can send and receive updates like any other participant, as long as the updates are received in order after downloading the initial document.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#store-document-as-a-revision-log" id="store-document-as-a-revision-log">Store document as a revision log<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>The document can be stored as an append-only log of operations/changes similar to the <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://learn.microsoft.com/en-us/azure/architecture/patterns/event-sourcing" rel="noreferrer noopener" target="_blank">Event Sourcing pattern</a>. Any revision of the document can be reconstructed by replaying the operations from the start up till that point. Hence the latest revision of the document can be obtained by replaying all the operations since the start. This method of storing data also allows clients to view the document's version history.</p>
<div class="overflow-x-auto"><table class="min-w-full"><thead><tr><th>Rev no.</th><th>User</th><th>Operations</th><th>Timestamp</th><th>Document state (not stored)</th></tr></thead><tbody><tr><td>0</td><td>N/A</td><td>N/A</td><td>2024-08-03 10:00</td><td>&lt;EMPTY&gt;</td></tr><tr><td>1</td><td>Charlie</td><td><code>INS "Hello" @0</code></td><td>2024-08-03 10:05</td><td>"Hello"</td></tr><tr><td>2</td><td>Alice</td><td><code>INS " world" @5</code></td><td>2024-08-03 10:10</td><td>"Hello world"</td></tr><tr><td>3</td><td>Bob</td><td><code>INS "!" @11</code></td><td>2024-08-03 10:15</td><td>"Hello world!"</td></tr></tbody></table></div>
<p>Note that the document state is not stored in each log entry as it can be derived from the preceding operations.</p>
<p>Storing as a log is necessary since some clients can be extremely outdated and need to catch up with the current document. Imagine the scenario where a user disconnected from a collaboration session and left the tab open. When they reconnect the next day and others have made updates since then, upon reconnecting, the client sends their current outdated document revision number which allows the server to determine the granular changes since that document revision and respond with a list of operations to be performed on the client, which might also need transformation.</p>
<p>Clients that join the editing session of a non-empty document do not need to fetch the entire log from the start; the server responds with the current state of the document. Subsequent document revisions can be computed via applying new operations (both local and from peers) to the initial session document state.</p>
<p>It's not demonstrated above, but each log entry can contain multiple operations as well.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#when-to-send-update-requests" id="when-to-send-update-requests">When to send update requests<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>When should update requests be sent? Should update requests be sent on every keystroke, after the user has stopped typing, or something else?</p>
<ul>
<li><strong>Keystroke</strong>: Send a request per keystroke. Not great because it can be taxing on the server and many potentially redundant operation logs created.</li>
<li><strong>Debouncing</strong>: Send a request after the user has stopped typing for a short duration (e.g. 300ms). Might not be ideal for users who type a lot without stopping as they can lose data if their browser crashes before the updates are sent out.</li>
<li><strong>Throttling</strong>: Send a request every fixed interval (e.g. 300ms) during continuous typing. Seems viable but it's tricky to determine the throttle duration value.</li>
</ul>
<p>None of the above strategies are truly viable because they all allow a user to send requests in parallel, meaning multiple requests are in-flight at the same time. This is a problem because the server is not guaranteed to receive the requests in the order they were sent, which can lead to race conditions and impossible operations.</p>
<p>There are ways to resolve out-of-order requests, but they aren't trivial. The client can include a monotonically increasing integer for every request in the session but the server has to keep track of the last request sent so far and if it receives an out-of-order request, defer the future request, then wait for the missing request (buffering future operations).</p>
<p>An elegant way taken by Google Docs is to ensure that each user only has a maximum of one update request in-flight (aka pending) by using a local updates buffer (a queue). The local updates buffer is cleared and operations in the buffer are sent to the server, under one of the following scenarios:</p>
<ul>
<li>If there are no pending requests, after a short idle duration (~200ms)</li>
<li>If there is a pending request, when the pending request has returned</li>
</ul>
<p>When a user starts typing:</p>
<ol>
<li>User operations are reflected locally on the client computer and added into the local updates buffer</li>
<li>After a short duration, a request is made which includes the operations in the local updates buffer</li>
<li>The local updates buffer is cleared upon sending of the request and any new local updates made while there's a pending request are added to the local updates buffer</li>
<li>If the local updates buffer is not empty, it only sends the next request after it receives a response for the current request from the server, even if the idle duration has passed</li>
<li>This repeats until the local updates buffer is empty (when the user has stopped typing) and there are no more operations to send to the server</li>
</ol>
<p><strong>Fast vs slow connections</strong>: Since there can only be one pending update request, the frequency of requests is highly dependent on the client's connection speed.</p>
<p><img alt="Fast vs slow connection for edit requests" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/fast-slow-connection-requests.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r1m:" data-state="closed"></p>
<ul>
<li><strong>Fast connection</strong>: Clients with faster network connection speed will send requests and receive responses faster, resulting in more frequent requests and each request containing a smaller payload. The local updates buffer will be cleared more often.</li>
<li><strong>Slow connection</strong>: Clients with a slower network connection speed will see fewer requests and each request will contain a larger payload. The local updates buffer will be cleared less often.</li>
</ul>
<p>By using a local updates buffer to hold local operations and having only one pending request per client, clients ensure that operations are sent in order and the server can immediately process a client request upon receiving it, knowing that every request from a client is the latest one.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#operation-granularity" id="operation-granularity">Operation granularity<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>A suitable operation granularity is one which doesn't result in too many operations yet also allows differentiation between the intentions. Consider the following scenarios:</p>
<ul>
<li>If a user is typing continuously, it'd be more efficient to make a single insertion operation that contains multiple characters rather than one insertion operation per character.</li>
<li>If a user holds backspace and deletes multiple characters, it'd be more efficient to make a single deletion operation that contains the deleted characters rather than one deletion operation per character.</li>
<li>If a user types some characters, realizes there's a typo, deletes the erroneous characters, then types again, these actions constitute "continuous typing" and could be coalesced into a single insertion operation. In this case, when the operations are sent to the server, the server does not see any deletions at all.</li>
</ul>
<p>The following guidelines are chosen:</p>
<ul>
<li><strong>Coalescing of continuous ranges</strong>: Operations on continuous ranges can be combined/coalesced into a single operation of the same kind.</li>
<li><strong>One operation per intention</strong>: Each intention (Insertion, Deletion, Formatting) will be a different kind of operation unless they are part of continuous typing.</li>
<li><strong>Coalescing of continuous typing actions</strong>: Continuous typing events include forward typing, deleting backwards, and deleting forwards.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#update-request-payload" id="update-request-payload">Update request payload<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>It wasn't explicitly mentioned, but each update payload can contain multiple operations. On slower network connections where requests round-trips take longer, there is a larger window for users to make local updates and sometimes that can include different kinds of operations, not just insertions.</p>
<p>In earlier network diagrams, the update requests only displayed single operations, but requests on Google Docs actually include an array of operations, which is all the operations in the updates buffer. The server iterates through the array of operations in order and transforms them where necessary.</p>
<p>By allowing update requests to contain an array of operations, the buffer is cleared more frequently and the likelihood of losing unsent changes (possibly due to crashes or closing of tabs) is lower.</p>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#putting-them-together" id="putting-them-together">Putting them together<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p>We've explained above how a client-server architecture can scale well for a large number of participants. Therefore we can focus on the communication between clients and servers and what information each tracks.</p>
<p>Each client tracks these information:</p>
<ol>
<li><strong>Latest document revision</strong>: The identifier of the most recent revision sent from the server to the client. Google Docs uses a monotonically increasing integer as the document revision id/number. This value is included in the request payload and response of each update request.</li>
<li><strong>Local updates buffer</strong>: Changes (operations) that have been made locally and not yet sent to the server. This is the updates buffer explained earlier.</li>
<li><strong>Sent updates buffer</strong>: Changes (operations) that have been made locally, sent to the server, but not yet acknowledged by the server. Tracking sent operations is necessary because requests can fail and the client should retry the request if a request fails.</li>
<li><strong>Updates log</strong>: Committed changes (operations) for the document since the initialized document revision. These changes could be the user's updates that have been acknowledged, or updates by peers that have been pushed to the client by the server. The operations can be already transformed on the server, or transformed on the client depending on the order of updates.</li>
<li><strong>Initial document state</strong>: The state of the document when the client first joined the editing session.</li>
<li><strong>Document state</strong>: The current state of the document displayed on the client. This can be computed from the initial document state, the received updates, updates buffer, and pending updates.</li>
</ol>
<p>Note that the operations in both the local updates buffer and pending updates buffer can be transformed depending on the contents of the received updates from the server. It is the client's responsibility to:</p>
<ul>
<li>Track the statuses of the local updates – send them to the server and move them to the sent updates buffer when appropriate.</li>
<li>After the sent updates have been acknowledged, move the sent updates to the updates log.</li>
<li>Receive updates from the server and transform any local updates where relevant.</li>
<li>Combine initial document state with updates log to compute the latest document state and display it.</li>
</ul>
<p>The server contains the following information:</p>
<ol>
<li><strong>Pending updates queue</strong>: A list of all changes (operations) received from clients that have not been processed.</li>
<li><strong>Revision log</strong>: A list of processed changes that gives the complete history of the document.</li>
<li><strong>Document state</strong>: The current state of the document as of the last processed change. This value can be derived by replaying all the changes since the start but is computed and cached so that it can be instantly sent to new clients that join the session. It is recomputed whenever a new change is processed.</li>
</ol>
<p>The server's responsibilities are to:</p>
<ul>
<li>Send clients the latest state of the document when they join the editing session.</li>
<li>Transform updates by clients if they were originally made on outdated revisions.</li>
<li>Broadcast updates to the other clients.</li>
</ul>
<p><em>Source: <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://drive.googleblog.com/2010/09/whats-different-about-new-google-docs.html" rel="noreferrer noopener" target="_blank">What’s different about the new Google Docs: Making collaboration fast</a></em></p>
<p>Let's run through a practical example of how the server works with clients to enable real-time collaborative editing using operational transformations.</p>
<p><img alt="Collaboration part 1" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/collaboration-part-1.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r1p:" data-state="closed"></p>
<ol>
<li>Alice, Bob, and the server start with an empty document</li>
<li>Alice types "Hello" and the insertion operation is added into her "Local updates". Alice sees the "Hello" instantly within her document replica</li>
<li>Alice's insertion of "Hello" is sent to the server and moved from "Local updates" to "Sent updates"</li>
<li>The server receives the request and adds Alice's insertion operation into its "Pending updates" queue</li>
<li>At the same time, Alice types the characters " world". This insertion is added to "Local updates" but will not be sent to the server until the "Sent updates" is empty</li>
<li>Server processes Alice's first insertion and updates its document state. It then sends an acknowledgement to Alice</li>
<li>Alice removes that operation from "Sent updates" and updates her latest revision number to 1</li>
<li>Server broadcasts Alice's insertion to Bob and Bob applies the operation to his document replica and updates his latest revision number to 1</li>
</ol>
<p><img alt="Collaboration part 2" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/collaboration-part-2.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r1v:" data-state="closed"></p>
<ol start="9">
<li>Alice's second insertion of " world" can now be processed. The operation is sent to the server and moved from "Local updates" to "Sent updates"</li>
<li>The server receives Alice's second request and adds her operation into its "Pending updates" queue</li>
<li>At the same time, Bob inserts a "!" character at the end of "Hello"</li>
<li>Bob's insertion of "!" is sent to the server and added to the server's "Pending updates" queue. Bob moves the operation from "Local updates" to "Sent updates"</li>
<li>Server processes Alice's second insertion first and sends an acknowledgement to Alice</li>
<li>Alice removes that operation from "Sent updates" and updates her latest revision number to 2</li>
<li>Server broadcasts Alice's insertion to Bob. However, Bob has uncommitted updates, so he needs to transform them against Alice's updates. Bob's insertion of "!" is transformed to the 11th position to make room for Alice's " world". Bob updates his latest revision number to 2</li>
<li>Server processes Bob's insertion next. It sees that Bob's operation was made against revision 1, which does not account for Alice's second insertion. Hence the server transforms Bob's insertion of "!" to the 11th position to make room for Alice's " world". This shift is identical to the transformation Bob's client made when it first received Alice's insertion of " world"</li>
<li>Server processes Bob's transformed insertion and sends an acknowledgement to Bob. Bob removes that operation from "Sent updates" and updates his latest revision number to 3</li>
<li>Server broadcasts Bob's insertion to Alice. It has already been transformed, so Alice can simply apply the operation and update her latest revision number to 3</li>
</ol>
<p>Alice, Bob, and the server all end up with the same version of the document.</p>
<p><strong>Note</strong>: Update logs of Alice and Bob aren't shown in the diagrams, but they mirror the server's revision log.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#transport-mechanisms" id="transport-mechanisms">Transport mechanisms<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>The collaboration approaches discussed thus far do not restrict or prescribe any transport mechanisms. However, there are certain requirements that the selected transport mechanism needs to fulfill:</p>
<ul>
<li><strong>Bidirectional</strong>: Servers need to be able to initiate sending of data to peer clients whenever an update from a client is received.</li>
<li><strong>Low latency</strong>: Although user edits are first made locally and appear instantaneously, and update payloads are small, a low latency transport mechanism will help users receive peer updates and persist changes more frequently, reducing the likelihood of data loss due to crashes.</li>
<li><strong>Ordered</strong>: Servers assume that updates broadcasted to clients will be received in the order they are sent as transformations are made with the assumption that the operations are made in order. Hence the transport mechanism needs to guarantee that messages are sent in order during broadcast.</li>
</ul>
<p>While latency is largely determined by network connection speed and reliability, the protocol also plays a part. Some transport approaches are persistent and therefore more efficient as there is no need for repeated handshakes and initialization. The possible approaches are:</p>
<ul>
<li><strong>Long polling</strong>: In long polling, the client sends a request to the server, and the server holds the connection open until new data is available. Once data is sent, the client immediately reopens the connection to wait for the next update.</li>
<li><strong>WebSockets</strong>: WebSockets provide a full-duplex communication channel over a single, long-lived persistent connection. Once a WebSocket connection is established between the client and server, the server can push updates to the client as they occur. Ideal for scenarios where both the client and server need to continuously exchange data, like in chat applications, multiplayer games, or collaborative editing tools.</li>
<li><strong>Server-sent events (SSE)</strong>: SSE is a standard that allows the server to push text-based event updates to the client via HTTP. Unlike WebSockets, SSE is unidirectional (server-to-client) and is more suitable for unidirectional scenarios where only the server needs to push data to the client. For client-to-server communication, standard HTTP requests can be used. SSE is well-suited for applications where updates are infrequent or the data is primarily sent from the server to the client.</li>
</ul>
<h4><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#analysis" id="analysis">Analysis<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h4>
<p><strong>Reliability</strong>: Reliability is the biggest concern here – how do we ensure that messages sent from the server are guaranteed to be received by the client? The connection could be unstable if the user is on the move or at a cafe. Persistent connections could disconnect and require reconnection. When a client is connecting, reconnecting, or offline, it can miss out on messages that happened on the server but could not reach the client.</p>
<p>This issue is especially significant in long polling. While long polling tries to mimic real-time updates, there can be a delay between when new data is available on the server and when it is received by the client. This delay occurs because the server needs to wait for an existing long polling request to return before the client can receive the new data. Reconnection is literally built into how long polling works, so there's a larger window for server updates to be missed.</p>
<p><strong>Ordering</strong>: None of the mentioned transport mechanisms guarantee in-order delivery of the messages. Client-to-server communication is guaranteed thanks to client-level message ordering by enforcing only one in-flight request at a time. Server-to-client communication ordering is required by the communication protocol but not built into it. In SSE, if the connection drops, it is automatically retried but that's not the case for other methods.</p>
<p>Overall, <strong>WebSockets is the best choice of transport mechanism for collaborative editing</strong> given its low-latency and bidirectional communication properties. WebSockets is widely used by many production-grade apps for real-time updates. Although WebSockets do not guarantee message ordering, that gap can be filled with custom logic in the application layer via libraries like <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://socket.io/" rel="noreferrer noopener" target="_blank">Socket.io</a>.</p>
<p>It is also possible to use SSE. We can use SSE for receiving peer updates and regular HTTP requests for sending messages, but it can be confusing to use two different transport mechanisms for collaborative editing.</p>
<p>Long polling is not viable given there are more modern technologies that overcome its shortcomings.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#overall-approach-summary" id="overall-approach-summary">Overall approach summary<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>Let's summarize the key areas of the overall approach.</p>
<ul>
<li><strong>Efficient request payload</strong>: Only the operation kind and necessary information is sent and received during updates, resulting in requests being small and efficient. The payload size isn't affected by the length of the document.</li>
<li><strong>Client-server network architecture</strong>: A client-server model is selected where participants connect to a central server. Having a central server simplifies the collaboration protocol easier to understand and implement as clients only have to focus on synchronization with the server and not other clients. The server can treat all clients in the same fashion.</li>
<li><strong>Concurrency control via version-detection</strong>: A version-detection model is the most ideal where each client holds a replica of the document and changes are propagated to peers as soon as possible. The document is never locked and every user can optimistically make changes locally without waiting for server acknowledgement. The speed and reliability of the network connection doesn’t limit how fast users can type. Conflicts in versions can be resolved by transforming operations (OT) or handled with special data structures (CRDTs).</li>
<li><strong>Conflict resolution via OT</strong>: OT is chosen due to its maturity and OT has its roots in document editing. Each operation provides enough information for merging updates. Google Docs has also stuck with OT technology over the years and is still using OT up till this day.</li>
<li><strong>Store documents as a revision log</strong>: The document is stored as an append-only log of operations/changes, which enables version history and efficient computation of differences between client states and server states.</li>
<li><strong>Update scheduling</strong>: Each client maintains a "local updates" buffer and "sent updates" buffer, ensuring that there will only be one network request in-flight at any time.</li>
<li><strong>Operation granularity</strong>: Operations granularity is decided at the intention level and continuous typing actions are coalesced.</li>
<li><strong>WebSockets for transport</strong>: WebSockets are low-latency and bidirectional which is suitable for server-to-client communication. Message out-of-order issues can be addressed via custom logic in the application layer.</li>
</ul>
<p>We highly recommend checking out this <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://operational-transformation.github.io/" rel="noreferrer noopener" target="_blank">interactive visualization of OT with a central server</a>, it really helps with understanding the collaboration protocol.</p>
<p>Now that we have discussed the various options and decided on an approach, we can reorganize and present them using the RADIO framework sections.</p>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#architecture--high-level-design" id="architecture--high-level-design">Architecture / high-level design<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<p>The high level architecture has already been covered extensively above. In summary, a client-server architecture is the most suitable given the requirements:</p>
<ul>
<li>Central server where all clients communicate with. Clients do not communicate with each other directly.</li>
<li>Server holds the source of truth as a revision log, which enables computation of the latest document state.</li>
<li>Clients sync with the server as soon as possible.</li>
</ul>
<p><img alt="Collaborative editor architecture" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/collaborative-editor-architecture.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r1s:" data-state="closed"></p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#component-responsibilities" id="component-responsibilities">Component responsibilities<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>We'll focus on the key components of a collaborative editor.</p>
<ul>
<li><strong>UI</strong>: Displays the document and sends events to the rich text editor core.</li>
<li><strong>Rich text editor core</strong>: Holds the document state/model, similar to the core of the rich text editor system design. Responds to user events by manipulating the underlying document state which triggers DOM events. Provides APIs for external modifications of the document state.</li>
<li><strong>Sync engine</strong>: Module responsible for syncing local updates to the server, receiving updates from the server (transforming appropriate operations) and updating the editor core. Most of everything discussed above lives in this module.<!-- -->
<ul>
<li><strong>Local updates buffer</strong>: Local operations that have not been sent to the server.</li>
<li><strong>Sent updates buffer</strong>: Local operations that have been sent to the server but not yet acknowledged by the server.</li>
<li><strong>Updates log</strong>: Revisions that have been committed as part of the document history.</li>
</ul>
</li>
<li><strong>Server</strong>: WebSocket server that can receive and push updates to the client.<!-- -->
<ul>
<li><strong>Pending updates</strong>: Operations from clients that have not been committed.</li>
<li><strong>Revision log</strong>: Operations that have been processed and can give the complete history of the document.</li>
</ul>
</li>
</ul>
<p>The editor core and UI is entirely decoupled from the sync engine and server back end. The editor core provides APIs for the sync engine to modify the document model depending on the received operations.</p>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#data-model" id="data-model">Data model<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<p>The core state to discuss here is the document state. As per the <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="/questions/system-design/rich-text-editor">Rich Text Editor system design article</a>, within the rich text editor core, the document state is modeled as a tree.</p>
<p>However within the sync engine, the document is stored as the initial document state + multiple lists (sequences) of operations (local, sent, received). The latest document state can be constructed by applying these operations on top of the initial document state. Each committed operation increases the revision number.</p>
<div class="overflow-x-auto"><table class="min-w-full"><thead><tr><th>Rev no.</th><th>User</th><th>Operations</th><th>Timestamp</th><th>Document</th></tr></thead><tbody><tr><td>0</td><td>N/A</td><td>N/A</td><td>2024-08-03 10:00</td><td>&lt;EMPTY&gt;</td></tr><tr><td>1</td><td>Charlie</td><td><code>INS "Hello" @0</code></td><td>2024-08-03 10:05</td><td>"Hello"</td></tr><tr><td>2</td><td>Alice</td><td><code>INS " world" @5</code></td><td>2024-08-03 10:10</td><td>"Hello world"</td></tr><tr><td>3</td><td>Bob</td><td><code>INS "!" @11</code></td><td>2024-08-03 10:15</td><td>"Hello world!"</td></tr></tbody></table></div>
<p>When a new user joins the session or if the current user refreshes the page, the document they initialize with is the latest version, constructed from all the committed operations on the server; all client-side operations lists will be empty.</p>
<p><img alt="User joins a collaborative editing session" src="https://www.gfecdn.net/img/questions/collaborative-editor-google-docs/join-session.png" class="mx-auto w-full max-w-lg cursor-zoom-in" decoding="async" loading="lazy" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r22:" data-state="closed"></p>
<p>The diagram above demonstrates the states of clients who join at different times. Alice joins the session when the document is at revision 1 and only contains "Hello". She adds " world" to the document and sees "Hello world" on her screen. Alice's document was constructed from an initial document state of "Hello" and her insertion operation of " world".</p>
<p>Bob then joins the session at revision 2 and he is directly initialized with the current document state of "Hello world", without any granular operations history.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#operational-transformations-on-the-document-level" id="operational-transformations-on-the-document-level">Operational transformations on the document level<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>So far the operations (and transforms) we have mentioned in this article are executed on the sentence level in a plaintext context. However, documents are rich text, how can transformations be performed on documents?</p>
<p>In the <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="/questions/system-design/rich-text-editor">Rich Text Editor system design article</a>, we have discussed how tree data structures can be used to represent rich text documents, hence we need OTs that can be used on tree structures. Discussing the technicalities of OTs is beyond the scope of this article, but we will briefly discuss the rough approach.</p>
<p>A full rich text document is represented as a tree and there are two categories of nodes – element nodes and text nodes. Element nodes can contain child nodes, which are other element nodes or text nodes, while text nodes are leaves and can only contain textual content (plaintext) and have formatting flags. Heading and paragraphs are subclasses of element nodes because they can contain child text nodes. At a high level, a document contains a root node with a list of heading elements, paragraph elements, as its direct children etc.</p>
<p>Operational transformations work well on strings, which are list-like structures. The children of element nodes are also in a list structure, see the similarity here?</p>
<p>Let's look at some potential scenarios when editing a document:</p>
<ul>
<li><strong>Inserting characters in the same sentence</strong>: Let's assume the sentence is contained within a single text node. We've covered such conflicts pretty thoroughly above. The insertion at the back will have to be transformed (offset increased) to make space for the insertion in front.</li>
<li><strong>Inserting paragraphs at the same time</strong>: Let's assume these paragraphs are direct children of the document root node. Inserting paragraphs is equivalent to modifying direct children of the root node, a list-like structure. Notice that inserting characters within the same sentence is also modifying a list (of characters) where the insertion operation at the back needs to be shifted. Hence a similar transformation can be used to resolve the conflict for paragraph insertions.</li>
<li><strong>Inserting characters in different paragraphs</strong>: There's no conflict here since different nodes are modified.</li>
</ul>
<p>The pattern here is that conflicts will arise when the same nodes are modified, which thankfully isn't that common in longer documents. OT techniques can be used to resolve conflicts in lists, whether they are a list of characters (in sentences and paragraphs) or a list of paragraphs (in the document's root node).</p>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#interface-definition-api" id="interface-definition-api">Interface definition (API)<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<p>We'll focus on the core APIs required for syncing between client and server.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#initialization-api" id="initialization-api">Initialization API<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>This API provides the client with the necessary information to start a collaborative editing session. A sample response looks like this:</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-json" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"revision"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">145</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"document"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"..."</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Rich text editor format</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></pre></div></div>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#updatesave-api" id="updatesave-api">Update/save API<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>This API allows sending of local updates to the server. Since this is done using WebSockets, a <code>type</code> field is necessary to differentiate between the requests. Note that multiple operations are allowed in a single update request.</p>
<p>Request</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-json pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"UPDATE"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"requestId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Monotonically increasing integer per client</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"revision"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">146</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Base revision that the update is performed on</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"isUndo"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Differentiate between new and undo operations</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"operations"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"nodeId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">24</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Needed in a document context</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"payload"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"characters"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Hello"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"index"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">4</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"nodeId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">25</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"payload"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"characters"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Bye"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"index"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></pre></div></div>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#update-acknowledgement-callback" id="update-acknowledgement-callback">Update acknowledgement callback<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>The server sends this to the client upon acknowledgement of an update request. Upon acknowledgement, clients can move the operation from the "Sent updates" to the "Updates log".</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-json pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"ACK"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"requestIdAcknowledged"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"requestId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"revision"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">147</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></pre></div></div>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#on-update-callback" id="on-update-callback">On update callback<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>These are server-initiated messages that indicate a peer made an update.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-json pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"PEER_UPDATE"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"revision"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">148</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"userId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">6543</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// User who made the update</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"operations"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"nodeId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">24</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Needed in a document context to identify the node to modify</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"payload"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"characters"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Goodbye"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"index"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">8</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"nodeId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">25</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"payload"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"characters"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">" earth"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token property">"index"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">4</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></pre></div></div>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#on-reconnect-callback" id="on-reconnect-callback">On reconnect callback<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>When clients disconnect and finally reconnect, the server should send it any revisions it has missed out on while the client was disconnected.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-json pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"SYNC"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token property">"revisions"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"revision"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">147</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"userId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">6543</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// User who made the update</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token property">"operations"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token property">"nodeId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">24</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// Needed in a document context to identify the node to modify</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token property">"payload"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token property">"characters"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Goodbye"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token property">"index"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">8</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token property">"type"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"INSERT"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token property">"nodeId"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">25</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token property">"payload"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token property">"characters"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">" earth"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token property">"index"</span><span class="token operator">:</span><span class="token plain"> </span><span class="token number">4</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span></div></pre></div></div>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#optimizations-and-deep-dive" id="optimizations-and-deep-dive">Optimizations and deep dive<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#history-and-versioning" id="history-and-versioning">History and versioning<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>Google Docs allow users to view the document history as a list of versions. By storing the document as a log of operations/updates, we can "time travel" and go back to the document state at any point in time. Each document revision is identified by a monotonically increasing positive integer, which is constructed from the operations up till that point.</p>
<div class="overflow-x-auto"><table class="min-w-full"><thead><tr><th>Rev no.</th><th>User</th><th>Operations</th><th>Timestamp</th><th>Document state</th></tr></thead><tbody><tr><td>0</td><td>N/A</td><td>N/A</td><td>2024-08-03 10:00</td><td></td></tr><tr><td>1</td><td>Charlie</td><td><code>INS "Hello" @0</code></td><td>2024-08-03 10:05</td><td>"Hello"</td></tr><tr><td>2</td><td>Alice</td><td><code>INS " world" @5</code></td><td>2024-08-03 10:10</td><td>"Hello world"</td></tr><tr><td>3</td><td>Bob</td><td><code>INS "!" @11</code></td><td>2024-08-03 10:15</td><td>"Hello world!"</td></tr><tr><td>4</td><td>Donald</td><td><code>INS " Goodbye" @12</code></td><td>2024-08-05 09:00</td><td>"Hello world! Goodbye"</td></tr><tr><td>5</td><td>Erin</td><td><code>INS " earth" @20</code></td><td>2024-08-05 09:10</td><td>"Hello world! Goodbye earth"</td></tr></tbody></table></div>
<p>Although every granular change is stored in the database, it is more meaningful to display a version log, which groups multiple revisions together. Changes made together within a short duration are part of the same version:</p>
<div class="overflow-x-auto"><table class="min-w-full"><thead><tr><th>Version</th><th>Time</th><th>Last edited by</th></tr></thead><tbody><tr><td>1</td><td>2024-08-03 10:15</td><td>Charlie, Bob, Alice</td></tr><tr><td>2</td><td>2024-08-05 09:10</td><td>Donald, Erin</td></tr></tbody></table></div>
<p>This is similar to what Google Docs displays when you click on the "Version History" button.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#undoredo" id="undoredo">Undo/redo<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>Undo/redo is a tricky topic for rich text editors and even more so when it is a collaborative one.</p>
<p>Should a user's undo/redo history be on the user level or document level (all participants share the same undo/redo)? It makes more sense to only undo your own actions as users are unlikely to be aware of what others are doing and want to undo them.</p>
<p>The document's revision log is append-only; we can only add, not remove. At the same time, removing already committed operations is complex as that might require other clients to undo certain transforms. Google Docs implements undo by appending the negation of the previous operation as a new update. Clients can filter their "Updates log" for changes that were made by them and append negations of those operations.</p>
<p>Hence update operations need an <code>isUndo</code> flag to differentiate between new operations vs undo operations and filter them out when identifying their last non-undo operation, otherwise users will be stuck at undo-ing/redo-ing (undo-ing the undo) the most recent operation.</p>
<div class="overflow-x-auto"><table class="min-w-full"><thead><tr><th>Rev no.</th><th>User</th><th>Operation</th><th>Is undo</th><th>Document</th></tr></thead><tbody><tr><td>4</td><td>Donald</td><td><code>INS " Goodbye" @12</code></td><td>False</td><td>"Hello world! Goodbye"</td></tr><tr><td>5</td><td>Erin</td><td><code>INS " earth" @20</code></td><td>False</td><td>"Hello world! Goodbye earth"</td></tr><tr><td>6</td><td>Erin</td><td><code>INS "..." @26</code></td><td>False</td><td>"Hello world! Goodbye earth…"</td></tr><tr><td>7</td><td>Erin</td><td><code>DEL 3 @29</code></td><td>True</td><td>"Hello world! Goodbye earth"</td></tr><tr><td>8</td><td>Erin</td><td><code>DEL 6 @26</code></td><td>True</td><td>"Hello world! Goodbye"</td></tr></tbody></table></div>
<p>The revision log above demonstrates how Erin's insertions are undone as deletion operations (a negation of the insertion) appended to the revision log as revisions 7 and 8.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#reliability" id="reliability">Reliability<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>Reliability is about ensuring that messages sent from the server are guaranteed to be received by the client, in the order they were sent. Clients can disconnect anytime, resulting in the possibility of the server sending a message and not being received by the client. Clients can also be on unstable network connections and some messages get lost in transition.</p>
<p>Dropped messages are not an issue if the messages contain the entire document state, but that as explained above, it isn't efficient. In our approach, messages contain crucial granular updates and missing out on any of them will result in document replicas going out-of-sync. Clients have to receive all peer operations in order to converge to the consistent document state.</p>
<p>This is where document revision numbers come in useful, if the server is aware of the document revision the client has, it can use that information to compute what updates are missing on the client.</p>
<p>Who should keep track of each client's latest document revision number? It is troublesome and also not scalable for servers to keep track of the document revision number of each client. A scalable approach involves clients maintaining the latest document revision number they have and including that value in server requests. That way, the server can remain relatively stateless.</p>
<p>If a client reconnects to the session with revision 5 in the payload and the server is currently on revision 8, the server knows that the client is missing revisions 6, 7, and 8, and thus can send the updates of revisions 6, 7, and 8.</p>
<p>Other reliability requirements include in-order delivery, retries, and acknowledgements. WebSockets do not include these features, so custom logic has to be added into the application layer via libraries like <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://socket.io/" rel="noreferrer noopener" target="_blank">Socket.io</a>.</p>
<p>The collaboration protocol outlined above can handle flaky connections well. As long as the client retains the document revision number and sends it to the server as part of the request payload, the server will be able to determine what updates are missing from the client. Each update operation also has a unique ID tagged to them, which facilitates de-duplication in the case of duplicate requests.</p>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#offline-editing" id="offline-editing">Offline editing<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>As of writing (Aug 2024), Google Docs does not support offline editing. However, offline editing can be supported relatively effortlessly with the current architecture. When the client detects that there is no network connection, users can continue editing, but any updates remain in the "local updates" buffer and are not sent out.</p>
<p>When the client regains network connectivity:</p>
<ul>
<li><strong>Send local updates to server</strong>: The "local updates" are sent to the server and moved to the "send updates" buffer.</li>
<li><strong>Fetch updates from server</strong>: The client could have missed out on some updates while it was offline, the server should push the missing updates since the client's last synced revision.</li>
</ul>
<h3><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#document-formats" id="document-formats">Document formats<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h3>
<p>There are numerous file formats that are supported by word processors like Google Docs and Microsoft Word. Out of which, the <code>.docx</code> (Microsoft Word) and <code>.odt</code> (OpenDocument Text) file formats are the most popular.</p>
<p>The specification for the <code>.docx</code> and <code>.odt</code> file formats are openly available:</p>
<ul>
<li><code>.docx</code>: <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-docx/b839fe1f-e1ca-4fa6-8c26-5954d0abbccd" rel="noreferrer noopener" target="_blank">Word Extensions to the Office Open XML (.docx) File Format</a></li>
<li><code>.odt</code>: <a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://en.wikipedia.org/wiki/OpenDocument_technical_specification" rel="noreferrer noopener" target="_blank">OpenDocument technical specification</a></li>
</ul>
<p>While Google Docs can open these file formats, it doesn't mean the internal document state matches them exactly. As long as the word processor includes modules to import and export between external formats and its internal state, the software is free to use any format internally.</p>
<p>Let's briefly look at what goes into <code>.odt</code> files. <code>.odt</code> files are OpenDocument Text files, a format used primarily by word processing applications like LibreOffice Writer and Apache OpenOffice. They are similar to <code>.docx</code> files used by Microsoft Word but are based on the OpenDocument format, an open standard for document file types.</p>
<p>An <code>.odt</code> file is essentially a ZIP archive that contains several XML files and directories, each serving a specific purpose in storing the content, styles, settings, and other aspects of the document. Here are examples of the main XML files within an <code>.odt</code> file:</p>
<p><strong><code>content.xml</code></strong>: This is the core file that contains the actual text content of the document along with its structure. It includes elements like paragraphs, tables, lists, and other document elements in XML format.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-xml pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">text</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">text:</span><span class="token tag" style="color:rgb(255, 121, 198)">p</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">This is a paragraph of text in the document.</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">text:</span><span class="token tag" style="color:rgb(255, 121, 198)">p</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">text:</span><span class="token tag" style="color:rgb(255, 121, 198)">table</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">&lt;!-- Table data here --&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">text:</span><span class="token tag" style="color:rgb(255, 121, 198)">table</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">text</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span></div></pre></div></div>
<p><strong><code>styles.xml</code></strong>: This file defines the styles used in the document, such as paragraph styles, character styles, table styles, and page layouts. It ensures consistent formatting across the document.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-xml pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">styles</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">style:</span><span class="token tag" style="color:rgb(255, 121, 198)">style</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">style:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">Heading1</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">style:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">family</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">paragraph</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">style:</span><span class="token tag" style="color:rgb(255, 121, 198)">text-properties</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">fo:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">font-size</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">18pt</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">fo:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">font-weight</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">bold</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">style:</span><span class="token tag" style="color:rgb(255, 121, 198)">style</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">styles</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span></div></pre></div></div>
<p><strong><code>meta.xml</code></strong>: Contains metadata about the document, such as the title, author, creation and modification dates, word count, and other descriptive information.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-xml pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">meta</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">meta:</span><span class="token tag" style="color:rgb(255, 121, 198)">initial-creator</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">John Doe</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">meta:</span><span class="token tag" style="color:rgb(255, 121, 198)">initial-creator</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">dc:</span><span class="token tag" style="color:rgb(255, 121, 198)">title</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">My Document</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">dc:</span><span class="token tag" style="color:rgb(255, 121, 198)">title</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">meta:</span><span class="token tag" style="color:rgb(255, 121, 198)">creation-date</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">2024-08-14T10:00:00</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">meta:</span><span class="token tag" style="color:rgb(255, 121, 198)">creation-date</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">meta</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span></div></pre></div></div>
<p><strong><code>settings.xml</code></strong>: Stores various settings related to the document, such as page view options, printer settings, and other user preferences that affect how the document is displayed or printed.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-xml pl-0" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">settings</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">config:</span><span class="token tag" style="color:rgb(255, 121, 198)">config-item-set</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">config:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">ooow:ViewSettings</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">config:</span><span class="token tag" style="color:rgb(255, 121, 198)">config-item</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">config:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">ViewMode</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">config:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">string</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain">Normal</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">config:</span><span class="token tag" style="color:rgb(255, 121, 198)">config-item</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">config:</span><span class="token tag" style="color:rgb(255, 121, 198)">config-item-set</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="code-line__counter token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">office:</span><span class="token tag" style="color:rgb(255, 121, 198)">settings</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span></div></pre></div></div>
<p><strong><code>manifest.xml</code></strong>: This file lists all the files contained within the <code>.odt</code> archive and their MIME types. It serves as a directory for the contents of the archive.</p>
<div><div class="relative"><pre class="code-block__counter prism-code language-xml" style="color:#F8F8F2;background-color:#282A36;--code-bg-color:#282A36;--code-color:#F8F8F2"><div class="token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">manifest:</span><span class="token tag" style="color:rgb(255, 121, 198)">manifest</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">manifest:</span><span class="token tag" style="color:rgb(255, 121, 198)">file-entry</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">manifest:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">full-path</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">/</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">manifest:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">media-type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">application/vnd.oasis.opendocument.text</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">manifest:</span><span class="token tag" style="color:rgb(255, 121, 198)">file-entry</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">manifest:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">full-path</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">content.xml</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag" style="color:rgb(255, 121, 198)"> </span><span class="token tag attr-name namespace" style="color:rgb(241, 250, 140)">manifest:</span><span class="token tag attr-name" style="color:rgb(241, 250, 140)">media-type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(248, 248, 242)">=</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag attr-value" style="color:rgb(255, 121, 198)">text/xml</span><span class="token tag attr-value punctuation" style="color:rgb(248, 248, 242)">"</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">/&gt;</span><span class="token plain"></span></div><div class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag namespace" style="color:rgb(255, 121, 198)">manifest:</span><span class="token tag" style="color:rgb(255, 121, 198)">manifest</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span></div></pre></div></div>
<p><strong>Other files</strong>:</p>
<ul>
<li><strong>Images</strong>: If the document contains images, they are stored as separate files within the package.</li>
<li><strong>Embedded objects</strong>: Other types of embedded objects, such as charts or spreadsheets, might also be included as separate files.</li>
</ul>
<p>These XML files work together to define the content, appearance, metadata, and settings of the document, allowing it to be opened, edited, and displayed consistently across different word processing software that supports the OpenDocument format.</p>
<hr>
<h2><a class="transition-colors underline-offset-[3.5px] break-words font-medium group cursor-pointer scroll-mt-28" href="#references" id="references">References<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" aria-hidden="true" class="shrink-0 size-5 ml-2 inline-block transition-all duration-300 opacity-0 group-hover:opacity-100 -translate-x-1/2 group-hover:translate-x-0 text-neutral-500 dark:text-neutral-500" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M18.3638 15.5355L16.9496 14.1213L18.3638 12.7071C20.3164 10.7545 20.3164 7.58866 18.3638 5.63604C16.4112 3.68341 13.2453 3.68341 11.2927 5.63604L9.87849 7.05025L8.46428 5.63604L9.87849 4.22182C12.6122 1.48815 17.0443 1.48815 19.778 4.22182C22.5117 6.95549 22.5117 11.3876 19.778 14.1213L18.3638 15.5355ZM15.5353 18.364L14.1211 19.7782C11.3875 22.5118 6.95531 22.5118 4.22164 19.7782C1.48797 17.0445 1.48797 12.6123 4.22164 9.87868L5.63585 8.46446L7.05007 9.87868L5.63585 11.2929C3.68323 13.2455 3.68323 16.4113 5.63585 18.364C7.58847 20.3166 10.7543 20.3166 12.7069 18.364L14.1211 16.9497L15.5353 18.364ZM14.8282 7.75736L16.2425 9.17157L9.17139 16.2426L7.75717 14.8284L14.8282 7.75736Z"></path></svg></a></h2>
<ul>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://dl.acm.org/doi/pdf/10.1145/67544.66963" rel="noreferrer noopener" target="_blank">Concurrency Control in Groupware Systems</a></li>
<li><a class="transition-colors underline-offset-[3.5px] break-words text-neutral-900 dark:text-brand hover:text-neutral-800 dark:hover:text-brand-dark underline dark:no-underline dark:hover:underline font-medium focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-neutral-700 dark:focus-visible:outline-brand" href="https://dl.acm.org/doi/pdf/10.1145/215585.215706" rel="noreferrer noopener" target="_blank">High-Latency, Low-Bandwidth Windowing in the Jupiter Collaboration System</a></li>
</ul></div></article>
`;

sendHtmlToNotion({
  html: html,
  pageId: 'your-page-id-here',
});
