{
  "version": 3,
  "sources": ["../../../../../../packages/dsa-javascript-challenges/src/fourConnector.ts"],
  "sourcesContent": ["import * as readline from 'readline';\n\nclass FourConnector {\n  board: Array<Array<string | null>>;\n  winner: string | undefined;\n  rl: readline.Interface;\n\n  constructor() {\n    this.board = Array.from({ length: 6 }, () => {\n      return Array.from({ length: 7 }).fill(null);\n    }) as unknown as Array<Array<string | null>>;\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n    this.winner = undefined;\n  }\n\n  checkInBox(r: number, c: number) {\n    return (\n      r >= 0 && r < this.board.length && c >= 0 && c < this.board[0].length\n    );\n  }\n\n  checkIsWin(row, col, playerParams) {\n    const mappingDirection = [\n      [0, 1],\n      [1, 0],\n      [1, 1],\n      [1, -1],\n    ];\n    for (let [rowDir, colDir] of mappingDirection) {\n      let count = 1;\n\n      // check forward\n      for (let forwardIndex = 1; forwardIndex < 7; forwardIndex++) {\n        const rowNext = row + forwardIndex * rowDir;\n        const colNext = col + forwardIndex * colDir;\n        if (\n          this.checkInBox(rowNext, colNext) &&\n          this.board[rowNext][colNext] === playerParams\n        ) {\n          count++;\n        } else {\n          break;\n        }\n      }\n\n      if (count >= 4) return true;\n\n      // checkBackward\n      for (let backwardIndex = 1; backwardIndex < 7; backwardIndex++) {\n        const rowPrev = row - backwardIndex * rowDir;\n        const colPrev = col - backwardIndex * colDir;\n        if (\n          this.checkInBox(rowPrev, colPrev) &&\n          this.board[rowPrev][colPrev] === playerParams\n        ) {\n          count++;\n        } else {\n          break;\n        }\n      }\n\n      if (count >= 4) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  makeAmove(col: number, playerParams: string) {\n    let isEmptyCell = false;\n    let row = 5;\n    while (!isEmptyCell && row >= 0) {\n      if (this.board[row][col] == null) {\n        this.board[row][col] = playerParams;\n        isEmptyCell = true;\n      }\n      if (this.board[row][col] !== null) {\n        row--;\n      }\n    }\n    const isWin = this.checkIsWin(row + 1, col, playerParams);\n    if (isWin) {\n      this.winner = playerParams;\n    }\n  }\n\n  inputPrompt(): Promise<{ col: number; player: string }> {\n    return new Promise((resolve, reject) => {\n      this.rl.question(`\\nPlease Input column and player: `, (input) => {\n        const [colStr, player] = input.trim().split(/\\s+/);\n        const col = Number(colStr);\n        if (Number.isInteger(col) && col < this.board[0].length) {\n          resolve({ col, player });\n        } else {\n          reject('invalid Move');\n        }\n      });\n    });\n  }\n\n  async play() {\n    while (!this.winner) {\n      try {\n        console.log(`\\n\\n==============================`);\n\n        this.displayBoard();\n        const { col, player } = await this.inputPrompt();\n        this.makeAmove(col, player);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    this.displayBoard();\n\n    console.log(`\\nthe winner is player ${this.winner}`);\n  }\n  displayBoard() {\n    this.board?.map((col) =>\n      console.log(\n        col?.reduce((acc, cell) => {\n          return `${acc} [${cell ? cell : ' '}]`;\n        }, '')\n      )\n    );\n  }\n}\n\nexport function fourConnector(): void {\n  const game = new FourConnector();\n  game.play();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA0B;AAE1B,MAAM,cAAc;AAAA,EAKlB,cAAc;AACZ,SAAK,QAAQ,MAAM,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM;AAC3C,aAAO,MAAM,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,IAAI;AAAA,IAC5C,CAAC;AACD,SAAK,KAAK,SAAS,gBAAgB;AAAA,MACjC,OAAO,QAAQ;AAAA,MACf,QAAQ,QAAQ;AAAA,IAClB,CAAC;AACD,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,WAAW,GAAW,GAAW;AAC/B,WACE,KAAK,KAAK,IAAI,KAAK,MAAM,UAAU,KAAK,KAAK,IAAI,KAAK,MAAM,CAAC,EAAE;AAAA,EAEnE;AAAA,EAEA,WAAW,KAAK,KAAK,cAAc;AACjC,UAAM,mBAAmB;AAAA,MACvB,CAAC,GAAG,CAAC;AAAA,MACL,CAAC,GAAG,CAAC;AAAA,MACL,CAAC,GAAG,CAAC;AAAA,MACL,CAAC,GAAG,EAAE;AAAA,IACR;AACA,aAAS,CAAC,QAAQ,MAAM,KAAK,kBAAkB;AAC7C,UAAI,QAAQ;AAGZ,eAAS,eAAe,GAAG,eAAe,GAAG,gBAAgB;AAC3D,cAAM,UAAU,MAAM,eAAe;AACrC,cAAM,UAAU,MAAM,eAAe;AACrC,YACE,KAAK,WAAW,SAAS,OAAO,KAChC,KAAK,MAAM,OAAO,EAAE,OAAO,MAAM,cACjC;AACA;AAAA,QACF,OAAO;AACL;AAAA,QACF;AAAA,MACF;AAEA,UAAI,SAAS;AAAG,eAAO;AAGvB,eAAS,gBAAgB,GAAG,gBAAgB,GAAG,iBAAiB;AAC9D,cAAM,UAAU,MAAM,gBAAgB;AACtC,cAAM,UAAU,MAAM,gBAAgB;AACtC,YACE,KAAK,WAAW,SAAS,OAAO,KAChC,KAAK,MAAM,OAAO,EAAE,OAAO,MAAM,cACjC;AACA;AAAA,QACF,OAAO;AACL;AAAA,QACF;AAAA,MACF;AAEA,UAAI,SAAS,GAAG;AACd,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,KAAa,cAAsB;AAC3C,QAAI,cAAc;AAClB,QAAI,MAAM;AACV,WAAO,CAAC,eAAe,OAAO,GAAG;AAC/B,UAAI,KAAK,MAAM,GAAG,EAAE,GAAG,KAAK,MAAM;AAChC,aAAK,MAAM,GAAG,EAAE,GAAG,IAAI;AACvB,sBAAc;AAAA,MAChB;AACA,UAAI,KAAK,MAAM,GAAG,EAAE,GAAG,MAAM,MAAM;AACjC;AAAA,MACF;AAAA,IACF;AACA,UAAM,QAAQ,KAAK,WAAW,MAAM,GAAG,KAAK,YAAY;AACxD,QAAI,OAAO;AACT,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,cAAwD;AACtD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,GAAG,SAAS;AAAA,mCAAsC,CAAC,UAAU;AAChE,cAAM,CAAC,QAAQ,MAAM,IAAI,MAAM,KAAK,EAAE,MAAM,KAAK;AACjD,cAAM,MAAM,OAAO,MAAM;AACzB,YAAI,OAAO,UAAU,GAAG,KAAK,MAAM,KAAK,MAAM,CAAC,EAAE,QAAQ;AACvD,kBAAQ,EAAE,KAAK,OAAO,CAAC;AAAA,QACzB,OAAO;AACL,iBAAO,cAAc;AAAA,QACvB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,OAAO;AACX,WAAO,CAAC,KAAK,QAAQ;AACnB,UAAI;AACF,gBAAQ,IAAI;AAAA;AAAA,+BAAoC;AAEhD,aAAK,aAAa;AAClB,cAAM,EAAE,KAAK,OAAO,IAAI,MAAM,KAAK,YAAY;AAC/C,aAAK,UAAU,KAAK,MAAM;AAAA,MAC5B,SAAS,OAAO;AACd,gBAAQ,IAAI,KAAK;AAAA,MACnB;AAAA,IACF;AAEA,SAAK,aAAa;AAElB,YAAQ,IAAI;AAAA,uBAA0B,KAAK,MAAM,EAAE;AAAA,EACrD;AAAA,EACA,eAAe;AACb,SAAK,OAAO;AAAA,MAAI,CAAC,QACf,QAAQ;AAAA,QACN,KAAK,OAAO,CAAC,KAAK,SAAS;AACzB,iBAAO,GAAG,GAAG,KAAK,OAAO,OAAO,GAAG;AAAA,QACrC,GAAG,EAAE;AAAA,MACP;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAAS,gBAAsB;AACpC,QAAM,OAAO,IAAI,cAAc;AAC/B,OAAK,KAAK;AACZ;",
  "names": []
}
